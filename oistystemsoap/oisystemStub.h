/* oisystemStub.h
   Generated by gSOAP 2.8.40 for oisystem.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"http://www.neoslon.net/"

#ifndef oisystemStub_H
#define oisystemStub_H
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20840
# error "GSOAP VERSION 20840 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns1__OIWebServiceCheck;	/* oisystem.h:149 */
class _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult;	/* oisystem.h:242 */
class _ns1__OIWebServiceCheckResponse;	/* oisystem.h:152 */
class _ns1__OIWebServiceLotStartCheck;	/* oisystem.h:155 */
class _ns1__OIWebServiceLotStartCheckResponse;	/* oisystem.h:158 */
class _ns1__OIWebEquipmentStatusCheck;	/* oisystem.h:161 */
class _ns1__OIWebEquipmentStatusCheckResponse;	/* oisystem.h:164 */
class _ns1__OIWebServiceLotStart;	/* oisystem.h:167 */
class _ns1__OIWebServiceLotStartResponse;	/* oisystem.h:170 */
class _ns1__OIWebEquipmentStatus;	/* oisystem.h:173 */
class _ns1__OIWebEquipmentStatusResponse;	/* oisystem.h:176 */
struct __ns1__OIWebServiceCheck;	/* oisystem.h:628 */
struct __ns1__OIWebServiceLotStartCheck;	/* oisystem.h:698 */
struct __ns1__OIWebEquipmentStatusCheck;	/* oisystem.h:768 */
struct __ns1__OIWebServiceLotStart;	/* oisystem.h:838 */
struct __ns1__OIWebEquipmentStatus;	/* oisystem.h:908 */

/* oisystem.h:149 */
#ifndef SOAP_TYPE__ns1__OIWebServiceCheck
#define SOAP_TYPE__ns1__OIWebServiceCheck (11)
/* complex XSD type 'ns1:OIWebServiceCheck': */
class SOAP_CMAC _ns1__OIWebServiceCheck {
      public:
        /// Optional element 'ns1:lotId' of XSD type 'xsd:string'
        std::string *lotId;
        /// Optional element 'ns1:operationId' of XSD type 'xsd:string'
        std::string *operationId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebServiceCheck
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebServiceCheck; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebServiceCheck, default initialized and not managed by a soap context
        virtual _ns1__OIWebServiceCheck *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebServiceCheck); }
      public:
        /// Constructor with initializations
        _ns1__OIWebServiceCheck()
        {
          lotId = (std::string *)0;
          operationId = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebServiceCheck() { }
        /// Friend allocator used by soap_new__ns1__OIWebServiceCheck(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebServiceCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheck(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:242 */
#ifndef SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult
#define SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult (24)
/* complex XSD type 'ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult': */
class SOAP_CMAC _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult {
      public:
        std::vector<char *> __any;
        char *__any_;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, default initialized and not managed by a soap context
        virtual _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult); }
      public:
        /// Constructor with initializations
        _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult()
        {
          __any_ = (char *)0;
        }
        virtual ~_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult() { }
        /// Friend allocator used by soap_new__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:152 */
#ifndef SOAP_TYPE__ns1__OIWebServiceCheckResponse
#define SOAP_TYPE__ns1__OIWebServiceCheckResponse (12)
/* complex XSD type 'ns1:OIWebServiceCheckResponse': */
class SOAP_CMAC _ns1__OIWebServiceCheckResponse {
      public:
        /// Optional element 'ns1:OIWebServiceCheckResult' of XSD type 'ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult'
        _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *OIWebServiceCheckResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebServiceCheckResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebServiceCheckResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebServiceCheckResponse, default initialized and not managed by a soap context
        virtual _ns1__OIWebServiceCheckResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebServiceCheckResponse); }
      public:
        /// Constructor with initializations
        _ns1__OIWebServiceCheckResponse()
        {
          OIWebServiceCheckResult = (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebServiceCheckResponse() { }
        /// Friend allocator used by soap_new__ns1__OIWebServiceCheckResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebServiceCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheckResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:155 */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartCheck
#define SOAP_TYPE__ns1__OIWebServiceLotStartCheck (13)
/* complex XSD type 'ns1:OIWebServiceLotStartCheck': */
class SOAP_CMAC _ns1__OIWebServiceLotStartCheck {
      public:
        /// Optional element 'ns1:siteId' of XSD type 'xsd:string'
        std::string *siteId;
        /// Optional element 'ns1:lotId' of XSD type 'xsd:string'
        std::string *lotId;
        /// Optional element 'ns1:operationId' of XSD type 'xsd:string'
        std::string *operationId;
        /// Optional element 'ns1:equipmentId' of XSD type 'xsd:string'
        std::string *equipmentId;
        /// Optional element 'ns1:languageId' of XSD type 'xsd:string'
        std::string *languageId;
        /// Optional element 'ns1:userId' of XSD type 'xsd:string'
        std::string *userId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebServiceLotStartCheck
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebServiceLotStartCheck; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebServiceLotStartCheck, default initialized and not managed by a soap context
        virtual _ns1__OIWebServiceLotStartCheck *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebServiceLotStartCheck); }
      public:
        /// Constructor with initializations
        _ns1__OIWebServiceLotStartCheck()
        {
          siteId = (std::string *)0;
          lotId = (std::string *)0;
          operationId = (std::string *)0;
          equipmentId = (std::string *)0;
          languageId = (std::string *)0;
          userId = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebServiceLotStartCheck() { }
        /// Friend allocator used by soap_new__ns1__OIWebServiceLotStartCheck(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebServiceLotStartCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartCheck(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:158 */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse
#define SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse (14)
/* complex XSD type 'ns1:OIWebServiceLotStartCheckResponse': */
class SOAP_CMAC _ns1__OIWebServiceLotStartCheckResponse {
      public:
        /// Required element 'ns1:OIWebServiceLotStartCheckResult' of XSD type 'xsd:boolean'
        bool OIWebServiceLotStartCheckResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebServiceLotStartCheckResponse, default initialized and not managed by a soap context
        virtual _ns1__OIWebServiceLotStartCheckResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebServiceLotStartCheckResponse); }
      public:
        /// Constructor with initializations
        _ns1__OIWebServiceLotStartCheckResponse()
        {
          OIWebServiceLotStartCheckResult = (bool)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebServiceLotStartCheckResponse() { }
        /// Friend allocator used by soap_new__ns1__OIWebServiceLotStartCheckResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebServiceLotStartCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartCheckResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:161 */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusCheck
#define SOAP_TYPE__ns1__OIWebEquipmentStatusCheck (15)
/* complex XSD type 'ns1:OIWebEquipmentStatusCheck': */
class SOAP_CMAC _ns1__OIWebEquipmentStatusCheck {
      public:
        /// Optional element 'ns1:siteId' of XSD type 'xsd:string'
        std::string *siteId;
        /// Optional element 'ns1:equipmentId' of XSD type 'xsd:string'
        std::string *equipmentId;
        /// Optional element 'ns1:eventId' of XSD type 'xsd:string'
        std::string *eventId;
        /// Optional element 'ns1:languageId' of XSD type 'xsd:string'
        std::string *languageId;
        /// Optional element 'ns1:userId' of XSD type 'xsd:string'
        std::string *userId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebEquipmentStatusCheck
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebEquipmentStatusCheck; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebEquipmentStatusCheck, default initialized and not managed by a soap context
        virtual _ns1__OIWebEquipmentStatusCheck *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebEquipmentStatusCheck); }
      public:
        /// Constructor with initializations
        _ns1__OIWebEquipmentStatusCheck()
        {
          siteId = (std::string *)0;
          equipmentId = (std::string *)0;
          eventId = (std::string *)0;
          languageId = (std::string *)0;
          userId = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebEquipmentStatusCheck() { }
        /// Friend allocator used by soap_new__ns1__OIWebEquipmentStatusCheck(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebEquipmentStatusCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusCheck(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:164 */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse
#define SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse (16)
/* complex XSD type 'ns1:OIWebEquipmentStatusCheckResponse': */
class SOAP_CMAC _ns1__OIWebEquipmentStatusCheckResponse {
      public:
        /// Required element 'ns1:OIWebEquipmentStatusCheckResult' of XSD type 'xsd:boolean'
        bool OIWebEquipmentStatusCheckResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebEquipmentStatusCheckResponse, default initialized and not managed by a soap context
        virtual _ns1__OIWebEquipmentStatusCheckResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebEquipmentStatusCheckResponse); }
      public:
        /// Constructor with initializations
        _ns1__OIWebEquipmentStatusCheckResponse()
        {
          OIWebEquipmentStatusCheckResult = (bool)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebEquipmentStatusCheckResponse() { }
        /// Friend allocator used by soap_new__ns1__OIWebEquipmentStatusCheckResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebEquipmentStatusCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusCheckResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:167 */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStart
#define SOAP_TYPE__ns1__OIWebServiceLotStart (17)
/* complex XSD type 'ns1:OIWebServiceLotStart': */
class SOAP_CMAC _ns1__OIWebServiceLotStart {
      public:
        /// Optional element 'ns1:siteId' of XSD type 'xsd:string'
        std::string *siteId;
        /// Optional element 'ns1:lotId' of XSD type 'xsd:string'
        std::string *lotId;
        /// Optional element 'ns1:operationId' of XSD type 'xsd:string'
        std::string *operationId;
        /// Optional element 'ns1:equipmentId' of XSD type 'xsd:string'
        std::string *equipmentId;
        /// Optional element 'ns1:languageId' of XSD type 'xsd:string'
        std::string *languageId;
        /// Optional element 'ns1:userId' of XSD type 'xsd:string'
        std::string *userId;
        /// Optional element 'ns1:resultMessage' of XSD type 'xsd:string'
        std::string *resultMessage;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebServiceLotStart
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebServiceLotStart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebServiceLotStart, default initialized and not managed by a soap context
        virtual _ns1__OIWebServiceLotStart *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebServiceLotStart); }
      public:
        /// Constructor with initializations
        _ns1__OIWebServiceLotStart()
        {
          siteId = (std::string *)0;
          lotId = (std::string *)0;
          operationId = (std::string *)0;
          equipmentId = (std::string *)0;
          languageId = (std::string *)0;
          userId = (std::string *)0;
          resultMessage = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebServiceLotStart() { }
        /// Friend allocator used by soap_new__ns1__OIWebServiceLotStart(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebServiceLotStart * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:170 */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartResponse
#define SOAP_TYPE__ns1__OIWebServiceLotStartResponse (18)
/* complex XSD type 'ns1:OIWebServiceLotStartResponse': */
class SOAP_CMAC _ns1__OIWebServiceLotStartResponse {
      public:
        /// Required element 'ns1:OIWebServiceLotStartResult' of XSD type 'xsd:boolean'
        bool OIWebServiceLotStartResult;
        /// Optional element 'ns1:resultMessage' of XSD type 'xsd:string'
        std::string *resultMessage;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebServiceLotStartResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebServiceLotStartResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebServiceLotStartResponse, default initialized and not managed by a soap context
        virtual _ns1__OIWebServiceLotStartResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebServiceLotStartResponse); }
      public:
        /// Constructor with initializations
        _ns1__OIWebServiceLotStartResponse()
        {
          OIWebServiceLotStartResult = (bool)0;
          resultMessage = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebServiceLotStartResponse() { }
        /// Friend allocator used by soap_new__ns1__OIWebServiceLotStartResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebServiceLotStartResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:173 */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatus
#define SOAP_TYPE__ns1__OIWebEquipmentStatus (19)
/* complex XSD type 'ns1:OIWebEquipmentStatus': */
class SOAP_CMAC _ns1__OIWebEquipmentStatus {
      public:
        /// Optional element 'ns1:siteId' of XSD type 'xsd:string'
        std::string *siteId;
        /// Optional element 'ns1:equipmentId' of XSD type 'xsd:string'
        std::string *equipmentId;
        /// Optional element 'ns1:eventId' of XSD type 'xsd:string'
        std::string *eventId;
        /// Optional element 'ns1:languageId' of XSD type 'xsd:string'
        std::string *languageId;
        /// Optional element 'ns1:userId' of XSD type 'xsd:string'
        std::string *userId;
        /// Optional element 'ns1:resultMessage' of XSD type 'xsd:string'
        std::string *resultMessage;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebEquipmentStatus
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebEquipmentStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebEquipmentStatus, default initialized and not managed by a soap context
        virtual _ns1__OIWebEquipmentStatus *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebEquipmentStatus); }
      public:
        /// Constructor with initializations
        _ns1__OIWebEquipmentStatus()
        {
          siteId = (std::string *)0;
          equipmentId = (std::string *)0;
          eventId = (std::string *)0;
          languageId = (std::string *)0;
          userId = (std::string *)0;
          resultMessage = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebEquipmentStatus() { }
        /// Friend allocator used by soap_new__ns1__OIWebEquipmentStatus(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebEquipmentStatus * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:176 */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusResponse
#define SOAP_TYPE__ns1__OIWebEquipmentStatusResponse (20)
/* complex XSD type 'ns1:OIWebEquipmentStatusResponse': */
class SOAP_CMAC _ns1__OIWebEquipmentStatusResponse {
      public:
        /// Required element 'ns1:OIWebEquipmentStatusResult' of XSD type 'xsd:boolean'
        bool OIWebEquipmentStatusResult;
        /// Optional element 'ns1:resultMessage' of XSD type 'xsd:string'
        std::string *resultMessage;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__OIWebEquipmentStatusResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__OIWebEquipmentStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__OIWebEquipmentStatusResponse, default initialized and not managed by a soap context
        virtual _ns1__OIWebEquipmentStatusResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__OIWebEquipmentStatusResponse); }
      public:
        /// Constructor with initializations
        _ns1__OIWebEquipmentStatusResponse()
        {
          OIWebEquipmentStatusResult = (bool)0;
          resultMessage = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__OIWebEquipmentStatusResponse() { }
        /// Friend allocator used by soap_new__ns1__OIWebEquipmentStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__OIWebEquipmentStatusResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:628 */
#ifndef SOAP_TYPE___ns1__OIWebServiceCheck
#define SOAP_TYPE___ns1__OIWebServiceCheck (31)
/* Wrapper: */
struct SOAP_CMAC __ns1__OIWebServiceCheck {
      public:
        /** Optional element 'ns1:OIWebServiceCheck' of XSD type 'ns1:OIWebServiceCheck' */
        _ns1__OIWebServiceCheck *ns1__OIWebServiceCheck;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OIWebServiceCheck */
        int soap_type() const { return SOAP_TYPE___ns1__OIWebServiceCheck; }
        /** Constructor with member initializations */
        __ns1__OIWebServiceCheck()
        {
          ns1__OIWebServiceCheck = (_ns1__OIWebServiceCheck *)0;
        }
        /** Friend allocator used by soap_new___ns1__OIWebServiceCheck(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__OIWebServiceCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceCheck(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:698 */
#ifndef SOAP_TYPE___ns1__OIWebServiceLotStartCheck
#define SOAP_TYPE___ns1__OIWebServiceLotStartCheck (35)
/* Wrapper: */
struct SOAP_CMAC __ns1__OIWebServiceLotStartCheck {
      public:
        /** Optional element 'ns1:OIWebServiceLotStartCheck' of XSD type 'ns1:OIWebServiceLotStartCheck' */
        _ns1__OIWebServiceLotStartCheck *ns1__OIWebServiceLotStartCheck;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OIWebServiceLotStartCheck */
        int soap_type() const { return SOAP_TYPE___ns1__OIWebServiceLotStartCheck; }
        /** Constructor with member initializations */
        __ns1__OIWebServiceLotStartCheck()
        {
          ns1__OIWebServiceLotStartCheck = (_ns1__OIWebServiceLotStartCheck *)0;
        }
        /** Friend allocator used by soap_new___ns1__OIWebServiceLotStartCheck(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__OIWebServiceLotStartCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceLotStartCheck(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:768 */
#ifndef SOAP_TYPE___ns1__OIWebEquipmentStatusCheck
#define SOAP_TYPE___ns1__OIWebEquipmentStatusCheck (39)
/* Wrapper: */
struct SOAP_CMAC __ns1__OIWebEquipmentStatusCheck {
      public:
        /** Optional element 'ns1:OIWebEquipmentStatusCheck' of XSD type 'ns1:OIWebEquipmentStatusCheck' */
        _ns1__OIWebEquipmentStatusCheck *ns1__OIWebEquipmentStatusCheck;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OIWebEquipmentStatusCheck */
        int soap_type() const { return SOAP_TYPE___ns1__OIWebEquipmentStatusCheck; }
        /** Constructor with member initializations */
        __ns1__OIWebEquipmentStatusCheck()
        {
          ns1__OIWebEquipmentStatusCheck = (_ns1__OIWebEquipmentStatusCheck *)0;
        }
        /** Friend allocator used by soap_new___ns1__OIWebEquipmentStatusCheck(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__OIWebEquipmentStatusCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebEquipmentStatusCheck(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:838 */
#ifndef SOAP_TYPE___ns1__OIWebServiceLotStart
#define SOAP_TYPE___ns1__OIWebServiceLotStart (43)
/* Wrapper: */
struct SOAP_CMAC __ns1__OIWebServiceLotStart {
      public:
        /** Optional element 'ns1:OIWebServiceLotStart' of XSD type 'ns1:OIWebServiceLotStart' */
        _ns1__OIWebServiceLotStart *ns1__OIWebServiceLotStart;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OIWebServiceLotStart */
        int soap_type() const { return SOAP_TYPE___ns1__OIWebServiceLotStart; }
        /** Constructor with member initializations */
        __ns1__OIWebServiceLotStart()
        {
          ns1__OIWebServiceLotStart = (_ns1__OIWebServiceLotStart *)0;
        }
        /** Friend allocator used by soap_new___ns1__OIWebServiceLotStart(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__OIWebServiceLotStart * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceLotStart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:908 */
#ifndef SOAP_TYPE___ns1__OIWebEquipmentStatus
#define SOAP_TYPE___ns1__OIWebEquipmentStatus (47)
/* Wrapper: */
struct SOAP_CMAC __ns1__OIWebEquipmentStatus {
      public:
        /** Optional element 'ns1:OIWebEquipmentStatus' of XSD type 'ns1:OIWebEquipmentStatus' */
        _ns1__OIWebEquipmentStatus *ns1__OIWebEquipmentStatus;
      public:
        /** Return unique type id SOAP_TYPE___ns1__OIWebEquipmentStatus */
        int soap_type() const { return SOAP_TYPE___ns1__OIWebEquipmentStatus; }
        /** Constructor with member initializations */
        __ns1__OIWebEquipmentStatus()
        {
          ns1__OIWebEquipmentStatus = (_ns1__OIWebEquipmentStatus *)0;
        }
        /** Friend allocator used by soap_new___ns1__OIWebEquipmentStatus(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__OIWebEquipmentStatus * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebEquipmentStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* oisystem.h:1119 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (48)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* oisystem.h:1119 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (49)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* oisystem.h:1119 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (51)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* oisystem.h:1119 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (54)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* oisystem.h:1119 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (55)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* oisystem.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* oisystem.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (27)
#endif

/* _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult has binding name '_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult
#define SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult (24)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (21)
#endif

/* _ns1__OIWebEquipmentStatusResponse has binding name '_ns1__OIWebEquipmentStatusResponse' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusResponse
#define SOAP_TYPE__ns1__OIWebEquipmentStatusResponse (20)
#endif

/* _ns1__OIWebEquipmentStatus has binding name '_ns1__OIWebEquipmentStatus' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatus
#define SOAP_TYPE__ns1__OIWebEquipmentStatus (19)
#endif

/* _ns1__OIWebServiceLotStartResponse has binding name '_ns1__OIWebServiceLotStartResponse' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartResponse
#define SOAP_TYPE__ns1__OIWebServiceLotStartResponse (18)
#endif

/* _ns1__OIWebServiceLotStart has binding name '_ns1__OIWebServiceLotStart' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStart
#define SOAP_TYPE__ns1__OIWebServiceLotStart (17)
#endif

/* _ns1__OIWebEquipmentStatusCheckResponse has binding name '_ns1__OIWebEquipmentStatusCheckResponse' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse
#define SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse (16)
#endif

/* _ns1__OIWebEquipmentStatusCheck has binding name '_ns1__OIWebEquipmentStatusCheck' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusCheck
#define SOAP_TYPE__ns1__OIWebEquipmentStatusCheck (15)
#endif

/* _ns1__OIWebServiceLotStartCheckResponse has binding name '_ns1__OIWebServiceLotStartCheckResponse' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse
#define SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse (14)
#endif

/* _ns1__OIWebServiceLotStartCheck has binding name '_ns1__OIWebServiceLotStartCheck' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartCheck
#define SOAP_TYPE__ns1__OIWebServiceLotStartCheck (13)
#endif

/* _ns1__OIWebServiceCheckResponse has binding name '_ns1__OIWebServiceCheckResponse' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebServiceCheckResponse
#define SOAP_TYPE__ns1__OIWebServiceCheckResponse (12)
#endif

/* _ns1__OIWebServiceCheck has binding name '_ns1__OIWebServiceCheck' for type '' */
#ifndef SOAP_TYPE__ns1__OIWebServiceCheck
#define SOAP_TYPE__ns1__OIWebServiceCheck (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (55)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (54)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (51)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (49)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (48)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (57)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (56)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (50)
#endif

/* _ns1__OIWebEquipmentStatus * has binding name 'PointerTo_ns1__OIWebEquipmentStatus' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatus
#define SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatus (44)
#endif

/* _ns1__OIWebServiceLotStart * has binding name 'PointerTo_ns1__OIWebServiceLotStart' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStart
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStart (40)
#endif

/* _ns1__OIWebEquipmentStatusCheck * has binding name 'PointerTo_ns1__OIWebEquipmentStatusCheck' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatusCheck
#define SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatusCheck (36)
#endif

/* _ns1__OIWebServiceLotStartCheck * has binding name 'PointerTo_ns1__OIWebServiceLotStartCheck' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStartCheck
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStartCheck (32)
#endif

/* _ns1__OIWebServiceCheck * has binding name 'PointerTo_ns1__OIWebServiceCheck' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceCheck
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceCheck (28)
#endif

/* _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * has binding name 'PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult (26)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (22)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (25)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of oisystemStub.h */
