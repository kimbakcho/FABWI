/* oisystemC.cpp
   Generated by gSOAP 2.8.40 for oisystem.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "oisystemH.h"

SOAP_SOURCE_STAMP("@(#) oisystemC.cpp ver 2.8.40 2017-01-09 01:58:11 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatus:
		return soap_in_PointerTo_ns1__OIWebEquipmentStatus(soap, NULL, NULL, "ns1:OIWebEquipmentStatus");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStart:
		return soap_in_PointerTo_ns1__OIWebServiceLotStart(soap, NULL, NULL, "ns1:OIWebServiceLotStart");
	case SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatusCheck:
		return soap_in_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, NULL, NULL, "ns1:OIWebEquipmentStatusCheck");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStartCheck:
		return soap_in_PointerTo_ns1__OIWebServiceLotStartCheck(soap, NULL, NULL, "ns1:OIWebServiceLotStartCheck");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceCheck:
		return soap_in_PointerTo_ns1__OIWebServiceCheck(soap, NULL, NULL, "ns1:OIWebServiceCheck");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		return soap_in_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, NULL, NULL, "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult"))
		{	*type = SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult;
			return soap_in__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebEquipmentStatusResponse"))
		{	*type = SOAP_TYPE__ns1__OIWebEquipmentStatusResponse;
			return soap_in__ns1__OIWebEquipmentStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebEquipmentStatus"))
		{	*type = SOAP_TYPE__ns1__OIWebEquipmentStatus;
			return soap_in__ns1__OIWebEquipmentStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebServiceLotStartResponse"))
		{	*type = SOAP_TYPE__ns1__OIWebServiceLotStartResponse;
			return soap_in__ns1__OIWebServiceLotStartResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebServiceLotStart"))
		{	*type = SOAP_TYPE__ns1__OIWebServiceLotStart;
			return soap_in__ns1__OIWebServiceLotStart(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebEquipmentStatusCheckResponse"))
		{	*type = SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse;
			return soap_in__ns1__OIWebEquipmentStatusCheckResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebEquipmentStatusCheck"))
		{	*type = SOAP_TYPE__ns1__OIWebEquipmentStatusCheck;
			return soap_in__ns1__OIWebEquipmentStatusCheck(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebServiceLotStartCheckResponse"))
		{	*type = SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse;
			return soap_in__ns1__OIWebServiceLotStartCheckResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebServiceLotStartCheck"))
		{	*type = SOAP_TYPE__ns1__OIWebServiceLotStartCheck;
			return soap_in__ns1__OIWebServiceLotStartCheck(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebServiceCheckResponse"))
		{	*type = SOAP_TYPE__ns1__OIWebServiceCheckResponse;
			return soap_in__ns1__OIWebServiceCheckResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OIWebServiceCheck"))
		{	*type = SOAP_TYPE__ns1__OIWebServiceCheck;
			return soap_in__ns1__OIWebServiceCheck(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		return ((_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *)ptr)->soap_out(soap, "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult", id, "");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__OIWebEquipmentStatusResponse:
		return ((_ns1__OIWebEquipmentStatusResponse *)ptr)->soap_out(soap, "ns1:OIWebEquipmentStatusResponse", id, "");
	case SOAP_TYPE__ns1__OIWebEquipmentStatus:
		return ((_ns1__OIWebEquipmentStatus *)ptr)->soap_out(soap, "ns1:OIWebEquipmentStatus", id, "");
	case SOAP_TYPE__ns1__OIWebServiceLotStartResponse:
		return ((_ns1__OIWebServiceLotStartResponse *)ptr)->soap_out(soap, "ns1:OIWebServiceLotStartResponse", id, "");
	case SOAP_TYPE__ns1__OIWebServiceLotStart:
		return ((_ns1__OIWebServiceLotStart *)ptr)->soap_out(soap, "ns1:OIWebServiceLotStart", id, "");
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse:
		return ((_ns1__OIWebEquipmentStatusCheckResponse *)ptr)->soap_out(soap, "ns1:OIWebEquipmentStatusCheckResponse", id, "");
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheck:
		return ((_ns1__OIWebEquipmentStatusCheck *)ptr)->soap_out(soap, "ns1:OIWebEquipmentStatusCheck", id, "");
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse:
		return ((_ns1__OIWebServiceLotStartCheckResponse *)ptr)->soap_out(soap, "ns1:OIWebServiceLotStartCheckResponse", id, "");
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheck:
		return ((_ns1__OIWebServiceLotStartCheck *)ptr)->soap_out(soap, "ns1:OIWebServiceLotStartCheck", id, "");
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse:
		return ((_ns1__OIWebServiceCheckResponse *)ptr)->soap_out(soap, "ns1:OIWebServiceCheckResponse", id, "");
	case SOAP_TYPE__ns1__OIWebServiceCheck:
		return ((_ns1__OIWebServiceCheck *)ptr)->soap_out(soap, "ns1:OIWebServiceCheck", id, "");
	case SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatus:
		return soap_out_PointerTo_ns1__OIWebEquipmentStatus(soap, tag, id, (_ns1__OIWebEquipmentStatus *const*)ptr, "ns1:OIWebEquipmentStatus");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStart:
		return soap_out_PointerTo_ns1__OIWebServiceLotStart(soap, tag, id, (_ns1__OIWebServiceLotStart *const*)ptr, "ns1:OIWebServiceLotStart");
	case SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatusCheck:
		return soap_out_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, tag, id, (_ns1__OIWebEquipmentStatusCheck *const*)ptr, "ns1:OIWebEquipmentStatusCheck");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStartCheck:
		return soap_out_PointerTo_ns1__OIWebServiceLotStartCheck(soap, tag, id, (_ns1__OIWebServiceLotStartCheck *const*)ptr, "ns1:OIWebServiceLotStartCheck");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceCheck:
		return soap_out_PointerTo_ns1__OIWebServiceCheck(soap, tag, id, (_ns1__OIWebServiceCheck *const*)ptr, "ns1:OIWebServiceCheck");
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		return soap_out_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, tag, id, (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*)ptr, "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		((_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusResponse:
		((_ns1__OIWebEquipmentStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatus:
		((_ns1__OIWebEquipmentStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartResponse:
		((_ns1__OIWebServiceLotStartResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStart:
		((_ns1__OIWebServiceLotStart *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse:
		((_ns1__OIWebEquipmentStatusCheckResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheck:
		((_ns1__OIWebEquipmentStatusCheck *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse:
		((_ns1__OIWebServiceLotStartCheckResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheck:
		((_ns1__OIWebServiceLotStartCheck *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse:
		((_ns1__OIWebServiceCheckResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheck:
		((_ns1__OIWebServiceCheck *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__OIWebEquipmentStatus:
		soap_serialize___ns1__OIWebEquipmentStatus(soap, (const struct __ns1__OIWebEquipmentStatus *)ptr);
		break;
	case SOAP_TYPE___ns1__OIWebServiceLotStart:
		soap_serialize___ns1__OIWebServiceLotStart(soap, (const struct __ns1__OIWebServiceLotStart *)ptr);
		break;
	case SOAP_TYPE___ns1__OIWebEquipmentStatusCheck:
		soap_serialize___ns1__OIWebEquipmentStatusCheck(soap, (const struct __ns1__OIWebEquipmentStatusCheck *)ptr);
		break;
	case SOAP_TYPE___ns1__OIWebServiceLotStartCheck:
		soap_serialize___ns1__OIWebServiceLotStartCheck(soap, (const struct __ns1__OIWebServiceLotStartCheck *)ptr);
		break;
	case SOAP_TYPE___ns1__OIWebServiceCheck:
		soap_serialize___ns1__OIWebServiceCheck(soap, (const struct __ns1__OIWebServiceCheck *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatus:
		soap_serialize_PointerTo_ns1__OIWebEquipmentStatus(soap, (_ns1__OIWebEquipmentStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStart:
		soap_serialize_PointerTo_ns1__OIWebServiceLotStart(soap, (_ns1__OIWebServiceLotStart *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatusCheck:
		soap_serialize_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, (_ns1__OIWebEquipmentStatusCheck *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStartCheck:
		soap_serialize_PointerTo_ns1__OIWebServiceLotStartCheck(soap, (_ns1__OIWebServiceLotStartCheck *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceCheck:
		soap_serialize_PointerTo_ns1__OIWebServiceCheck(soap, (_ns1__OIWebServiceCheck *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		soap_serialize_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 oisystem_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)oisystem_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebServiceCheck:
		return (void*)oisystem_instantiate__ns1__OIWebServiceCheck(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		return (void*)oisystem_instantiate__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse:
		return (void*)oisystem_instantiate__ns1__OIWebServiceCheckResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheck:
		return (void*)oisystem_instantiate__ns1__OIWebServiceLotStartCheck(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse:
		return (void*)oisystem_instantiate__ns1__OIWebServiceLotStartCheckResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheck:
		return (void*)oisystem_instantiate__ns1__OIWebEquipmentStatusCheck(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse:
		return (void*)oisystem_instantiate__ns1__OIWebEquipmentStatusCheckResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebServiceLotStart:
		return (void*)oisystem_instantiate__ns1__OIWebServiceLotStart(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebServiceLotStartResponse:
		return (void*)oisystem_instantiate__ns1__OIWebServiceLotStartResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebEquipmentStatus:
		return (void*)oisystem_instantiate__ns1__OIWebEquipmentStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OIWebEquipmentStatusResponse:
		return (void*)oisystem_instantiate__ns1__OIWebEquipmentStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OIWebServiceCheck:
		return (void*)oisystem_instantiate___ns1__OIWebServiceCheck(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OIWebServiceLotStartCheck:
		return (void*)oisystem_instantiate___ns1__OIWebServiceLotStartCheck(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OIWebEquipmentStatusCheck:
		return (void*)oisystem_instantiate___ns1__OIWebEquipmentStatusCheck(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OIWebServiceLotStart:
		return (void*)oisystem_instantiate___ns1__OIWebServiceLotStart(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OIWebEquipmentStatus:
		return (void*)oisystem_instantiate___ns1__OIWebEquipmentStatus(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)oisystem_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)oisystem_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)oisystem_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)oisystem_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)oisystem_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		return (void*)oisystem_instantiate_std__vectorTemplateOf_XML(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 oisystem_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheck:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebServiceCheck*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebServiceCheck*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebServiceCheckResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebServiceCheckResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheck:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebServiceLotStartCheck*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebServiceLotStartCheck*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebServiceLotStartCheckResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebServiceLotStartCheckResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheck:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebEquipmentStatusCheck*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebEquipmentStatusCheck*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebEquipmentStatusCheckResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebEquipmentStatusCheckResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStart:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebServiceLotStart*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebServiceLotStart*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebServiceLotStartResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebServiceLotStartResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatus:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebEquipmentStatus*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebEquipmentStatus*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__OIWebEquipmentStatusResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__OIWebEquipmentStatusResponse*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__OIWebServiceCheck:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__OIWebServiceCheck*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__OIWebServiceCheck*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__OIWebServiceLotStartCheck:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__OIWebServiceLotStartCheck*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__OIWebServiceLotStartCheck*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__OIWebEquipmentStatusCheck:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__OIWebEquipmentStatusCheck*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__OIWebEquipmentStatusCheck*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__OIWebServiceLotStart:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__OIWebServiceLotStart*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__OIWebServiceLotStart*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__OIWebEquipmentStatus:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__OIWebEquipmentStatus*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__OIWebEquipmentStatus*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<char *> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<char *> *>(p->ptr));
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 oisystem_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 oisystem_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (t == SOAP_TYPE__XML)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<char *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<char *> *)p)[index] = *(char **)q;
		}
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheck:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebServiceCheck type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebServiceCheck*)p = *(_ns1__OIWebServiceCheck*)q;
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult*)p = *(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult*)q;
		break;
	case SOAP_TYPE__ns1__OIWebServiceCheckResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebServiceCheckResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebServiceCheckResponse*)p = *(_ns1__OIWebServiceCheckResponse*)q;
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheck:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebServiceLotStartCheck type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebServiceLotStartCheck*)p = *(_ns1__OIWebServiceLotStartCheck*)q;
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebServiceLotStartCheckResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebServiceLotStartCheckResponse*)p = *(_ns1__OIWebServiceLotStartCheckResponse*)q;
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheck:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebEquipmentStatusCheck type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebEquipmentStatusCheck*)p = *(_ns1__OIWebEquipmentStatusCheck*)q;
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebEquipmentStatusCheckResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebEquipmentStatusCheckResponse*)p = *(_ns1__OIWebEquipmentStatusCheckResponse*)q;
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStart:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebServiceLotStart type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebServiceLotStart*)p = *(_ns1__OIWebServiceLotStart*)q;
		break;
	case SOAP_TYPE__ns1__OIWebServiceLotStartResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebServiceLotStartResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebServiceLotStartResponse*)p = *(_ns1__OIWebServiceLotStartResponse*)q;
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebEquipmentStatus type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebEquipmentStatus*)p = *(_ns1__OIWebEquipmentStatus*)q;
		break;
	case SOAP_TYPE__ns1__OIWebEquipmentStatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__OIWebEquipmentStatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__OIWebEquipmentStatusResponse*)p = *(_ns1__OIWebEquipmentStatusResponse*)q;
		break;
	case SOAP_TYPE___ns1__OIWebServiceCheck:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__OIWebServiceCheck type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__OIWebServiceCheck*)p = *(struct __ns1__OIWebServiceCheck*)q;
		break;
	case SOAP_TYPE___ns1__OIWebServiceLotStartCheck:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__OIWebServiceLotStartCheck type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__OIWebServiceLotStartCheck*)p = *(struct __ns1__OIWebServiceLotStartCheck*)q;
		break;
	case SOAP_TYPE___ns1__OIWebEquipmentStatusCheck:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__OIWebEquipmentStatusCheck type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__OIWebEquipmentStatusCheck*)p = *(struct __ns1__OIWebEquipmentStatusCheck*)q;
		break;
	case SOAP_TYPE___ns1__OIWebServiceLotStart:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__OIWebServiceLotStart type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__OIWebServiceLotStart*)p = *(struct __ns1__OIWebServiceLotStart*)q;
		break;
	case SOAP_TYPE___ns1__OIWebEquipmentStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__OIWebEquipmentStatus type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__OIWebEquipmentStatus*)p = *(struct __ns1__OIWebEquipmentStatus*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOf_XML(soap, &this->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any);
	this->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any_ = NULL;
}

void _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any);
#endif
}

int _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, const char *tag, int id, const _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &a->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any, ""))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any_, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * SOAP_FMAC4 soap_in__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, const char *tag, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, sizeof(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &a->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any, ""))
					continue;
			if (soap_flag___any_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any_))
				{	soap_flag___any_1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, sizeof(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *p;
	size_t k = sizeof(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, tag ? tag : "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * SOAP_FMAC4 soap_get__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, oisystem_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 oisystem_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_std__string, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebEquipmentStatusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__OIWebEquipmentStatusResponse::OIWebEquipmentStatusResult);
	this->_ns1__OIWebEquipmentStatusResponse::resultMessage = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebEquipmentStatusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatusResponse::resultMessage);
#endif
}

int _ns1__OIWebEquipmentStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebEquipmentStatusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatusResponse(struct soap *soap, const char *tag, int id, const _ns1__OIWebEquipmentStatusResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebEquipmentStatusResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:OIWebEquipmentStatusResult");
	if (soap_out_bool(soap, "ns1:OIWebEquipmentStatusResult", -1, &a->_ns1__OIWebEquipmentStatusResponse::OIWebEquipmentStatusResult, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:resultMessage", -1, &a->_ns1__OIWebEquipmentStatusResponse::resultMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebEquipmentStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebEquipmentStatusResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusResponse * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatusResponse(struct soap *soap, const char *tag, _ns1__OIWebEquipmentStatusResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebEquipmentStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebEquipmentStatusResponse, sizeof(_ns1__OIWebEquipmentStatusResponse), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebEquipmentStatusResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebEquipmentStatusResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_OIWebEquipmentStatusResult1 = 1;
	size_t soap_flag_resultMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OIWebEquipmentStatusResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:OIWebEquipmentStatusResult", &a->_ns1__OIWebEquipmentStatusResponse::OIWebEquipmentStatusResult, "xsd:boolean"))
				{	soap_flag_OIWebEquipmentStatusResult1--;
					continue;
				}
			if (soap_flag_resultMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:resultMessage", &a->_ns1__OIWebEquipmentStatusResponse::resultMessage, "xsd:string"))
				{	soap_flag_resultMessage1--;
					continue;
				}
			soap_check_result(soap, "ns1:OIWebEquipmentStatusResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OIWebEquipmentStatusResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__OIWebEquipmentStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebEquipmentStatusResponse, SOAP_TYPE__ns1__OIWebEquipmentStatusResponse, sizeof(_ns1__OIWebEquipmentStatusResponse), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebEquipmentStatusResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebEquipmentStatusResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebEquipmentStatusResponse *p;
	size_t k = sizeof(_ns1__OIWebEquipmentStatusResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebEquipmentStatusResponse);
		if (p)
			((_ns1__OIWebEquipmentStatusResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebEquipmentStatusResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebEquipmentStatusResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebEquipmentStatusResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebEquipmentStatusResponse, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebEquipmentStatusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebEquipmentStatusResponse(soap, tag ? tag : "ns1:OIWebEquipmentStatusResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebEquipmentStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebEquipmentStatusResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusResponse * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatusResponse(struct soap *soap, _ns1__OIWebEquipmentStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebEquipmentStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebEquipmentStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OIWebEquipmentStatus::siteId = NULL;
	this->_ns1__OIWebEquipmentStatus::equipmentId = NULL;
	this->_ns1__OIWebEquipmentStatus::eventId = NULL;
	this->_ns1__OIWebEquipmentStatus::languageId = NULL;
	this->_ns1__OIWebEquipmentStatus::userId = NULL;
	this->_ns1__OIWebEquipmentStatus::resultMessage = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebEquipmentStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatus::siteId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatus::equipmentId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatus::eventId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatus::languageId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatus::userId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatus::resultMessage);
#endif
}

int _ns1__OIWebEquipmentStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebEquipmentStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatus(struct soap *soap, const char *tag, int id, const _ns1__OIWebEquipmentStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebEquipmentStatus), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:siteId", -1, &a->_ns1__OIWebEquipmentStatus::siteId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:equipmentId", -1, &a->_ns1__OIWebEquipmentStatus::equipmentId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:eventId", -1, &a->_ns1__OIWebEquipmentStatus::eventId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:languageId", -1, &a->_ns1__OIWebEquipmentStatus::languageId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:userId", -1, &a->_ns1__OIWebEquipmentStatus::userId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:resultMessage", -1, &a->_ns1__OIWebEquipmentStatus::resultMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebEquipmentStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebEquipmentStatus(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatus(struct soap *soap, const char *tag, _ns1__OIWebEquipmentStatus *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebEquipmentStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebEquipmentStatus, sizeof(_ns1__OIWebEquipmentStatus), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebEquipmentStatus)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebEquipmentStatus *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_siteId1 = 1;
	size_t soap_flag_equipmentId1 = 1;
	size_t soap_flag_eventId1 = 1;
	size_t soap_flag_languageId1 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_resultMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_siteId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:siteId", &a->_ns1__OIWebEquipmentStatus::siteId, "xsd:string"))
				{	soap_flag_siteId1--;
					continue;
				}
			if (soap_flag_equipmentId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:equipmentId", &a->_ns1__OIWebEquipmentStatus::equipmentId, "xsd:string"))
				{	soap_flag_equipmentId1--;
					continue;
				}
			if (soap_flag_eventId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:eventId", &a->_ns1__OIWebEquipmentStatus::eventId, "xsd:string"))
				{	soap_flag_eventId1--;
					continue;
				}
			if (soap_flag_languageId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:languageId", &a->_ns1__OIWebEquipmentStatus::languageId, "xsd:string"))
				{	soap_flag_languageId1--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:userId", &a->_ns1__OIWebEquipmentStatus::userId, "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_resultMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:resultMessage", &a->_ns1__OIWebEquipmentStatus::resultMessage, "xsd:string"))
				{	soap_flag_resultMessage1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OIWebEquipmentStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebEquipmentStatus, SOAP_TYPE__ns1__OIWebEquipmentStatus, sizeof(_ns1__OIWebEquipmentStatus), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebEquipmentStatus * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebEquipmentStatus(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebEquipmentStatus *p;
	size_t k = sizeof(_ns1__OIWebEquipmentStatus);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebEquipmentStatus);
		if (p)
			((_ns1__OIWebEquipmentStatus*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebEquipmentStatus, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebEquipmentStatus*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebEquipmentStatus location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebEquipmentStatus, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebEquipmentStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebEquipmentStatus(soap, tag ? tag : "ns1:OIWebEquipmentStatus", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebEquipmentStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebEquipmentStatus(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatus(struct soap *soap, _ns1__OIWebEquipmentStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebEquipmentStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebServiceLotStartResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__OIWebServiceLotStartResponse::OIWebServiceLotStartResult);
	this->_ns1__OIWebServiceLotStartResponse::resultMessage = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebServiceLotStartResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStartResponse::resultMessage);
#endif
}

int _ns1__OIWebServiceLotStartResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebServiceLotStartResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStartResponse(struct soap *soap, const char *tag, int id, const _ns1__OIWebServiceLotStartResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebServiceLotStartResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:OIWebServiceLotStartResult");
	if (soap_out_bool(soap, "ns1:OIWebServiceLotStartResult", -1, &a->_ns1__OIWebServiceLotStartResponse::OIWebServiceLotStartResult, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:resultMessage", -1, &a->_ns1__OIWebServiceLotStartResponse::resultMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebServiceLotStartResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebServiceLotStartResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartResponse * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStartResponse(struct soap *soap, const char *tag, _ns1__OIWebServiceLotStartResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebServiceLotStartResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebServiceLotStartResponse, sizeof(_ns1__OIWebServiceLotStartResponse), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebServiceLotStartResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebServiceLotStartResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_OIWebServiceLotStartResult1 = 1;
	size_t soap_flag_resultMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OIWebServiceLotStartResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:OIWebServiceLotStartResult", &a->_ns1__OIWebServiceLotStartResponse::OIWebServiceLotStartResult, "xsd:boolean"))
				{	soap_flag_OIWebServiceLotStartResult1--;
					continue;
				}
			if (soap_flag_resultMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:resultMessage", &a->_ns1__OIWebServiceLotStartResponse::resultMessage, "xsd:string"))
				{	soap_flag_resultMessage1--;
					continue;
				}
			soap_check_result(soap, "ns1:OIWebServiceLotStartResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OIWebServiceLotStartResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__OIWebServiceLotStartResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebServiceLotStartResponse, SOAP_TYPE__ns1__OIWebServiceLotStartResponse, sizeof(_ns1__OIWebServiceLotStartResponse), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebServiceLotStartResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebServiceLotStartResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebServiceLotStartResponse *p;
	size_t k = sizeof(_ns1__OIWebServiceLotStartResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebServiceLotStartResponse);
		if (p)
			((_ns1__OIWebServiceLotStartResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebServiceLotStartResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebServiceLotStartResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebServiceLotStartResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebServiceLotStartResponse, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebServiceLotStartResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebServiceLotStartResponse(soap, tag ? tag : "ns1:OIWebServiceLotStartResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebServiceLotStartResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebServiceLotStartResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartResponse * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStartResponse(struct soap *soap, _ns1__OIWebServiceLotStartResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebServiceLotStartResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebServiceLotStart::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OIWebServiceLotStart::siteId = NULL;
	this->_ns1__OIWebServiceLotStart::lotId = NULL;
	this->_ns1__OIWebServiceLotStart::operationId = NULL;
	this->_ns1__OIWebServiceLotStart::equipmentId = NULL;
	this->_ns1__OIWebServiceLotStart::languageId = NULL;
	this->_ns1__OIWebServiceLotStart::userId = NULL;
	this->_ns1__OIWebServiceLotStart::resultMessage = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebServiceLotStart::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStart::siteId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStart::lotId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStart::operationId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStart::equipmentId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStart::languageId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStart::userId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStart::resultMessage);
#endif
}

int _ns1__OIWebServiceLotStart::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebServiceLotStart(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStart(struct soap *soap, const char *tag, int id, const _ns1__OIWebServiceLotStart *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebServiceLotStart), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:siteId", -1, &a->_ns1__OIWebServiceLotStart::siteId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lotId", -1, &a->_ns1__OIWebServiceLotStart::lotId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:operationId", -1, &a->_ns1__OIWebServiceLotStart::operationId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:equipmentId", -1, &a->_ns1__OIWebServiceLotStart::equipmentId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:languageId", -1, &a->_ns1__OIWebServiceLotStart::languageId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:userId", -1, &a->_ns1__OIWebServiceLotStart::userId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:resultMessage", -1, &a->_ns1__OIWebServiceLotStart::resultMessage, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebServiceLotStart::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebServiceLotStart(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStart(struct soap *soap, const char *tag, _ns1__OIWebServiceLotStart *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebServiceLotStart *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebServiceLotStart, sizeof(_ns1__OIWebServiceLotStart), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebServiceLotStart)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebServiceLotStart *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_siteId1 = 1;
	size_t soap_flag_lotId1 = 1;
	size_t soap_flag_operationId1 = 1;
	size_t soap_flag_equipmentId1 = 1;
	size_t soap_flag_languageId1 = 1;
	size_t soap_flag_userId1 = 1;
	size_t soap_flag_resultMessage1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_siteId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:siteId", &a->_ns1__OIWebServiceLotStart::siteId, "xsd:string"))
				{	soap_flag_siteId1--;
					continue;
				}
			if (soap_flag_lotId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lotId", &a->_ns1__OIWebServiceLotStart::lotId, "xsd:string"))
				{	soap_flag_lotId1--;
					continue;
				}
			if (soap_flag_operationId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:operationId", &a->_ns1__OIWebServiceLotStart::operationId, "xsd:string"))
				{	soap_flag_operationId1--;
					continue;
				}
			if (soap_flag_equipmentId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:equipmentId", &a->_ns1__OIWebServiceLotStart::equipmentId, "xsd:string"))
				{	soap_flag_equipmentId1--;
					continue;
				}
			if (soap_flag_languageId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:languageId", &a->_ns1__OIWebServiceLotStart::languageId, "xsd:string"))
				{	soap_flag_languageId1--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:userId", &a->_ns1__OIWebServiceLotStart::userId, "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap_flag_resultMessage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:resultMessage", &a->_ns1__OIWebServiceLotStart::resultMessage, "xsd:string"))
				{	soap_flag_resultMessage1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OIWebServiceLotStart *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebServiceLotStart, SOAP_TYPE__ns1__OIWebServiceLotStart, sizeof(_ns1__OIWebServiceLotStart), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebServiceLotStart * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStart(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebServiceLotStart(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebServiceLotStart *p;
	size_t k = sizeof(_ns1__OIWebServiceLotStart);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebServiceLotStart);
		if (p)
			((_ns1__OIWebServiceLotStart*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebServiceLotStart, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebServiceLotStart*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebServiceLotStart location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebServiceLotStart, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebServiceLotStart::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebServiceLotStart(soap, tag ? tag : "ns1:OIWebServiceLotStart", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebServiceLotStart::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebServiceLotStart(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStart(struct soap *soap, _ns1__OIWebServiceLotStart *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebServiceLotStart(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebEquipmentStatusCheckResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__OIWebEquipmentStatusCheckResponse::OIWebEquipmentStatusCheckResult);
	/* transient soap skipped */
}

void _ns1__OIWebEquipmentStatusCheckResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__OIWebEquipmentStatusCheckResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebEquipmentStatusCheckResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, const char *tag, int id, const _ns1__OIWebEquipmentStatusCheckResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:OIWebEquipmentStatusCheckResult");
	if (soap_out_bool(soap, "ns1:OIWebEquipmentStatusCheckResult", -1, &a->_ns1__OIWebEquipmentStatusCheckResponse::OIWebEquipmentStatusCheckResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebEquipmentStatusCheckResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebEquipmentStatusCheckResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheckResponse * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, const char *tag, _ns1__OIWebEquipmentStatusCheckResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebEquipmentStatusCheckResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse, sizeof(_ns1__OIWebEquipmentStatusCheckResponse), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebEquipmentStatusCheckResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_OIWebEquipmentStatusCheckResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OIWebEquipmentStatusCheckResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:OIWebEquipmentStatusCheckResult", &a->_ns1__OIWebEquipmentStatusCheckResponse::OIWebEquipmentStatusCheckResult, "xsd:boolean"))
				{	soap_flag_OIWebEquipmentStatusCheckResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:OIWebEquipmentStatusCheckResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OIWebEquipmentStatusCheckResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__OIWebEquipmentStatusCheckResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse, SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse, sizeof(_ns1__OIWebEquipmentStatusCheckResponse), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebEquipmentStatusCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebEquipmentStatusCheckResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebEquipmentStatusCheckResponse *p;
	size_t k = sizeof(_ns1__OIWebEquipmentStatusCheckResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebEquipmentStatusCheckResponse);
		if (p)
			((_ns1__OIWebEquipmentStatusCheckResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebEquipmentStatusCheckResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebEquipmentStatusCheckResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebEquipmentStatusCheckResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebEquipmentStatusCheckResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebEquipmentStatusCheckResponse(soap, tag ? tag : "ns1:OIWebEquipmentStatusCheckResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebEquipmentStatusCheckResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebEquipmentStatusCheckResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheckResponse * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, _ns1__OIWebEquipmentStatusCheckResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebEquipmentStatusCheckResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebEquipmentStatusCheck::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OIWebEquipmentStatusCheck::siteId = NULL;
	this->_ns1__OIWebEquipmentStatusCheck::equipmentId = NULL;
	this->_ns1__OIWebEquipmentStatusCheck::eventId = NULL;
	this->_ns1__OIWebEquipmentStatusCheck::languageId = NULL;
	this->_ns1__OIWebEquipmentStatusCheck::userId = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebEquipmentStatusCheck::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatusCheck::siteId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatusCheck::equipmentId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatusCheck::eventId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatusCheck::languageId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebEquipmentStatusCheck::userId);
#endif
}

int _ns1__OIWebEquipmentStatusCheck::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebEquipmentStatusCheck(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *tag, int id, const _ns1__OIWebEquipmentStatusCheck *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:siteId", -1, &a->_ns1__OIWebEquipmentStatusCheck::siteId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:equipmentId", -1, &a->_ns1__OIWebEquipmentStatusCheck::equipmentId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:eventId", -1, &a->_ns1__OIWebEquipmentStatusCheck::eventId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:languageId", -1, &a->_ns1__OIWebEquipmentStatusCheck::languageId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:userId", -1, &a->_ns1__OIWebEquipmentStatusCheck::userId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebEquipmentStatusCheck::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebEquipmentStatusCheck(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *tag, _ns1__OIWebEquipmentStatusCheck *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebEquipmentStatusCheck *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck, sizeof(_ns1__OIWebEquipmentStatusCheck), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebEquipmentStatusCheck)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebEquipmentStatusCheck *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_siteId1 = 1;
	size_t soap_flag_equipmentId1 = 1;
	size_t soap_flag_eventId1 = 1;
	size_t soap_flag_languageId1 = 1;
	size_t soap_flag_userId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_siteId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:siteId", &a->_ns1__OIWebEquipmentStatusCheck::siteId, "xsd:string"))
				{	soap_flag_siteId1--;
					continue;
				}
			if (soap_flag_equipmentId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:equipmentId", &a->_ns1__OIWebEquipmentStatusCheck::equipmentId, "xsd:string"))
				{	soap_flag_equipmentId1--;
					continue;
				}
			if (soap_flag_eventId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:eventId", &a->_ns1__OIWebEquipmentStatusCheck::eventId, "xsd:string"))
				{	soap_flag_eventId1--;
					continue;
				}
			if (soap_flag_languageId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:languageId", &a->_ns1__OIWebEquipmentStatusCheck::languageId, "xsd:string"))
				{	soap_flag_languageId1--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:userId", &a->_ns1__OIWebEquipmentStatusCheck::userId, "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OIWebEquipmentStatusCheck *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck, sizeof(_ns1__OIWebEquipmentStatusCheck), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebEquipmentStatusCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusCheck(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebEquipmentStatusCheck(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebEquipmentStatusCheck *p;
	size_t k = sizeof(_ns1__OIWebEquipmentStatusCheck);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebEquipmentStatusCheck);
		if (p)
			((_ns1__OIWebEquipmentStatusCheck*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebEquipmentStatusCheck, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebEquipmentStatusCheck*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebEquipmentStatusCheck location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebEquipmentStatusCheck::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebEquipmentStatusCheck(soap, tag ? tag : "ns1:OIWebEquipmentStatusCheck", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebEquipmentStatusCheck::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebEquipmentStatusCheck(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatusCheck(struct soap *soap, _ns1__OIWebEquipmentStatusCheck *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebEquipmentStatusCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebServiceLotStartCheckResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__OIWebServiceLotStartCheckResponse::OIWebServiceLotStartCheckResult);
	/* transient soap skipped */
}

void _ns1__OIWebServiceLotStartCheckResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__OIWebServiceLotStartCheckResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebServiceLotStartCheckResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, const char *tag, int id, const _ns1__OIWebServiceLotStartCheckResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:OIWebServiceLotStartCheckResult");
	if (soap_out_bool(soap, "ns1:OIWebServiceLotStartCheckResult", -1, &a->_ns1__OIWebServiceLotStartCheckResponse::OIWebServiceLotStartCheckResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebServiceLotStartCheckResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebServiceLotStartCheckResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartCheckResponse * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, const char *tag, _ns1__OIWebServiceLotStartCheckResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebServiceLotStartCheckResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse, sizeof(_ns1__OIWebServiceLotStartCheckResponse), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebServiceLotStartCheckResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_OIWebServiceLotStartCheckResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OIWebServiceLotStartCheckResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:OIWebServiceLotStartCheckResult", &a->_ns1__OIWebServiceLotStartCheckResponse::OIWebServiceLotStartCheckResult, "xsd:boolean"))
				{	soap_flag_OIWebServiceLotStartCheckResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:OIWebServiceLotStartCheckResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OIWebServiceLotStartCheckResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__OIWebServiceLotStartCheckResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse, SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse, sizeof(_ns1__OIWebServiceLotStartCheckResponse), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebServiceLotStartCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebServiceLotStartCheckResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebServiceLotStartCheckResponse *p;
	size_t k = sizeof(_ns1__OIWebServiceLotStartCheckResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebServiceLotStartCheckResponse);
		if (p)
			((_ns1__OIWebServiceLotStartCheckResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebServiceLotStartCheckResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebServiceLotStartCheckResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebServiceLotStartCheckResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebServiceLotStartCheckResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebServiceLotStartCheckResponse(soap, tag ? tag : "ns1:OIWebServiceLotStartCheckResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebServiceLotStartCheckResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebServiceLotStartCheckResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartCheckResponse * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, _ns1__OIWebServiceLotStartCheckResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebServiceLotStartCheckResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebServiceLotStartCheck::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OIWebServiceLotStartCheck::siteId = NULL;
	this->_ns1__OIWebServiceLotStartCheck::lotId = NULL;
	this->_ns1__OIWebServiceLotStartCheck::operationId = NULL;
	this->_ns1__OIWebServiceLotStartCheck::equipmentId = NULL;
	this->_ns1__OIWebServiceLotStartCheck::languageId = NULL;
	this->_ns1__OIWebServiceLotStartCheck::userId = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebServiceLotStartCheck::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStartCheck::siteId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStartCheck::lotId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStartCheck::operationId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStartCheck::equipmentId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStartCheck::languageId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceLotStartCheck::userId);
#endif
}

int _ns1__OIWebServiceLotStartCheck::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebServiceLotStartCheck(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *tag, int id, const _ns1__OIWebServiceLotStartCheck *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebServiceLotStartCheck), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:siteId", -1, &a->_ns1__OIWebServiceLotStartCheck::siteId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lotId", -1, &a->_ns1__OIWebServiceLotStartCheck::lotId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:operationId", -1, &a->_ns1__OIWebServiceLotStartCheck::operationId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:equipmentId", -1, &a->_ns1__OIWebServiceLotStartCheck::equipmentId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:languageId", -1, &a->_ns1__OIWebServiceLotStartCheck::languageId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:userId", -1, &a->_ns1__OIWebServiceLotStartCheck::userId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebServiceLotStartCheck::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebServiceLotStartCheck(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *tag, _ns1__OIWebServiceLotStartCheck *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebServiceLotStartCheck *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebServiceLotStartCheck, sizeof(_ns1__OIWebServiceLotStartCheck), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebServiceLotStartCheck)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebServiceLotStartCheck *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_siteId1 = 1;
	size_t soap_flag_lotId1 = 1;
	size_t soap_flag_operationId1 = 1;
	size_t soap_flag_equipmentId1 = 1;
	size_t soap_flag_languageId1 = 1;
	size_t soap_flag_userId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_siteId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:siteId", &a->_ns1__OIWebServiceLotStartCheck::siteId, "xsd:string"))
				{	soap_flag_siteId1--;
					continue;
				}
			if (soap_flag_lotId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lotId", &a->_ns1__OIWebServiceLotStartCheck::lotId, "xsd:string"))
				{	soap_flag_lotId1--;
					continue;
				}
			if (soap_flag_operationId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:operationId", &a->_ns1__OIWebServiceLotStartCheck::operationId, "xsd:string"))
				{	soap_flag_operationId1--;
					continue;
				}
			if (soap_flag_equipmentId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:equipmentId", &a->_ns1__OIWebServiceLotStartCheck::equipmentId, "xsd:string"))
				{	soap_flag_equipmentId1--;
					continue;
				}
			if (soap_flag_languageId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:languageId", &a->_ns1__OIWebServiceLotStartCheck::languageId, "xsd:string"))
				{	soap_flag_languageId1--;
					continue;
				}
			if (soap_flag_userId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:userId", &a->_ns1__OIWebServiceLotStartCheck::userId, "xsd:string"))
				{	soap_flag_userId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OIWebServiceLotStartCheck *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebServiceLotStartCheck, SOAP_TYPE__ns1__OIWebServiceLotStartCheck, sizeof(_ns1__OIWebServiceLotStartCheck), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebServiceLotStartCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartCheck(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebServiceLotStartCheck(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebServiceLotStartCheck *p;
	size_t k = sizeof(_ns1__OIWebServiceLotStartCheck);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebServiceLotStartCheck);
		if (p)
			((_ns1__OIWebServiceLotStartCheck*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebServiceLotStartCheck, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebServiceLotStartCheck*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebServiceLotStartCheck location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebServiceLotStartCheck, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebServiceLotStartCheck::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebServiceLotStartCheck(soap, tag ? tag : "ns1:OIWebServiceLotStartCheck", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebServiceLotStartCheck::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebServiceLotStartCheck(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStartCheck(struct soap *soap, _ns1__OIWebServiceLotStartCheck *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebServiceLotStartCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebServiceCheckResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OIWebServiceCheckResponse::OIWebServiceCheckResult = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebServiceCheckResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, &this->_ns1__OIWebServiceCheckResponse::OIWebServiceCheckResult);
#endif
}

int _ns1__OIWebServiceCheckResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebServiceCheckResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceCheckResponse(struct soap *soap, const char *tag, int id, const _ns1__OIWebServiceCheckResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebServiceCheckResponse), type))
		return soap->error;
	if (a->OIWebServiceCheckResult)
		soap_element_result(soap, "ns1:OIWebServiceCheckResult");
	if (soap_out_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, "ns1:OIWebServiceCheckResult", -1, &a->_ns1__OIWebServiceCheckResponse::OIWebServiceCheckResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebServiceCheckResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebServiceCheckResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebServiceCheckResponse * SOAP_FMAC4 soap_in__ns1__OIWebServiceCheckResponse(struct soap *soap, const char *tag, _ns1__OIWebServiceCheckResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebServiceCheckResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebServiceCheckResponse, sizeof(_ns1__OIWebServiceCheckResponse), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebServiceCheckResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebServiceCheckResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_OIWebServiceCheckResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OIWebServiceCheckResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, "ns1:OIWebServiceCheckResult", &a->_ns1__OIWebServiceCheckResponse::OIWebServiceCheckResult, ""))
				{	soap_flag_OIWebServiceCheckResult1--;
					continue;
				}
			soap_check_result(soap, "ns1:OIWebServiceCheckResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OIWebServiceCheckResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebServiceCheckResponse, SOAP_TYPE__ns1__OIWebServiceCheckResponse, sizeof(_ns1__OIWebServiceCheckResponse), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebServiceCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheckResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebServiceCheckResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebServiceCheckResponse *p;
	size_t k = sizeof(_ns1__OIWebServiceCheckResponse);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebServiceCheckResponse);
		if (p)
			((_ns1__OIWebServiceCheckResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebServiceCheckResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebServiceCheckResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebServiceCheckResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebServiceCheckResponse, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebServiceCheckResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebServiceCheckResponse(soap, tag ? tag : "ns1:OIWebServiceCheckResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebServiceCheckResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebServiceCheckResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebServiceCheckResponse * SOAP_FMAC4 soap_get__ns1__OIWebServiceCheckResponse(struct soap *soap, _ns1__OIWebServiceCheckResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebServiceCheckResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__OIWebServiceCheck::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OIWebServiceCheck::lotId = NULL;
	this->_ns1__OIWebServiceCheck::operationId = NULL;
	/* transient soap skipped */
}

void _ns1__OIWebServiceCheck::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceCheck::lotId);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__OIWebServiceCheck::operationId);
#endif
}

int _ns1__OIWebServiceCheck::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OIWebServiceCheck(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceCheck(struct soap *soap, const char *tag, int id, const _ns1__OIWebServiceCheck *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OIWebServiceCheck), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:lotId", -1, &a->_ns1__OIWebServiceCheck::lotId, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:operationId", -1, &a->_ns1__OIWebServiceCheck::operationId, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__OIWebServiceCheck::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OIWebServiceCheck(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OIWebServiceCheck * SOAP_FMAC4 soap_in__ns1__OIWebServiceCheck(struct soap *soap, const char *tag, _ns1__OIWebServiceCheck *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OIWebServiceCheck *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OIWebServiceCheck, sizeof(_ns1__OIWebServiceCheck), soap->type, soap->arrayType, oisystem_instantiate, oisystem_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__OIWebServiceCheck)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__OIWebServiceCheck *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_lotId1 = 1;
	size_t soap_flag_operationId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lotId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:lotId", &a->_ns1__OIWebServiceCheck::lotId, "xsd:string"))
				{	soap_flag_lotId1--;
					continue;
				}
			if (soap_flag_operationId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:operationId", &a->_ns1__OIWebServiceCheck::operationId, "xsd:string"))
				{	soap_flag_operationId1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OIWebServiceCheck *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OIWebServiceCheck, SOAP_TYPE__ns1__OIWebServiceCheck, sizeof(_ns1__OIWebServiceCheck), 0, oisystem_finsert, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__OIWebServiceCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheck(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate__ns1__OIWebServiceCheck(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__OIWebServiceCheck *p;
	size_t k = sizeof(_ns1__OIWebServiceCheck);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__OIWebServiceCheck);
		if (p)
			((_ns1__OIWebServiceCheck*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__OIWebServiceCheck, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns1__OIWebServiceCheck*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__OIWebServiceCheck location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__OIWebServiceCheck, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__OIWebServiceCheck::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__OIWebServiceCheck(soap, tag ? tag : "ns1:OIWebServiceCheck", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OIWebServiceCheck::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OIWebServiceCheck(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OIWebServiceCheck * SOAP_FMAC4 soap_get__ns1__OIWebServiceCheck(struct soap *soap, _ns1__OIWebServiceCheck *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OIWebServiceCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, oisystem_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, oisystem_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, oisystem_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, oisystem_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, oisystem_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebEquipmentStatus(struct soap *soap, struct __ns1__OIWebEquipmentStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OIWebEquipmentStatus = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebEquipmentStatus(struct soap *soap, const struct __ns1__OIWebEquipmentStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OIWebEquipmentStatus(soap, &a->ns1__OIWebEquipmentStatus);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebEquipmentStatus(struct soap *soap, const char *tag, int id, const struct __ns1__OIWebEquipmentStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__OIWebEquipmentStatus(soap, "ns1:OIWebEquipmentStatus", -1, &a->ns1__OIWebEquipmentStatus, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_in___ns1__OIWebEquipmentStatus(struct soap *soap, const char *tag, struct __ns1__OIWebEquipmentStatus *a, const char *type)
{
	size_t soap_flag_ns1__OIWebEquipmentStatus = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OIWebEquipmentStatus *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OIWebEquipmentStatus, sizeof(struct __ns1__OIWebEquipmentStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OIWebEquipmentStatus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OIWebEquipmentStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OIWebEquipmentStatus(soap, "ns1:OIWebEquipmentStatus", &a->ns1__OIWebEquipmentStatus, ""))
				{	soap_flag_ns1__OIWebEquipmentStatus--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__OIWebEquipmentStatus * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebEquipmentStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate___ns1__OIWebEquipmentStatus(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__OIWebEquipmentStatus *p;
	size_t k = sizeof(struct __ns1__OIWebEquipmentStatus);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__OIWebEquipmentStatus);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__OIWebEquipmentStatus, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__OIWebEquipmentStatus location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__OIWebEquipmentStatus, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebEquipmentStatus(struct soap *soap, const struct __ns1__OIWebEquipmentStatus *a, const char *tag, const char *type)
{
	if (soap_out___ns1__OIWebEquipmentStatus(soap, tag ? tag : "-ns1:OIWebEquipmentStatus", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_get___ns1__OIWebEquipmentStatus(struct soap *soap, struct __ns1__OIWebEquipmentStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OIWebEquipmentStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebServiceLotStart(struct soap *soap, struct __ns1__OIWebServiceLotStart *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OIWebServiceLotStart = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebServiceLotStart(struct soap *soap, const struct __ns1__OIWebServiceLotStart *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OIWebServiceLotStart(soap, &a->ns1__OIWebServiceLotStart);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebServiceLotStart(struct soap *soap, const char *tag, int id, const struct __ns1__OIWebServiceLotStart *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__OIWebServiceLotStart(soap, "ns1:OIWebServiceLotStart", -1, &a->ns1__OIWebServiceLotStart, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_in___ns1__OIWebServiceLotStart(struct soap *soap, const char *tag, struct __ns1__OIWebServiceLotStart *a, const char *type)
{
	size_t soap_flag_ns1__OIWebServiceLotStart = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OIWebServiceLotStart *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OIWebServiceLotStart, sizeof(struct __ns1__OIWebServiceLotStart), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OIWebServiceLotStart(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OIWebServiceLotStart && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OIWebServiceLotStart(soap, "ns1:OIWebServiceLotStart", &a->ns1__OIWebServiceLotStart, ""))
				{	soap_flag_ns1__OIWebServiceLotStart--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__OIWebServiceLotStart * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceLotStart(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate___ns1__OIWebServiceLotStart(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__OIWebServiceLotStart *p;
	size_t k = sizeof(struct __ns1__OIWebServiceLotStart);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__OIWebServiceLotStart);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__OIWebServiceLotStart, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__OIWebServiceLotStart location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__OIWebServiceLotStart, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebServiceLotStart(struct soap *soap, const struct __ns1__OIWebServiceLotStart *a, const char *tag, const char *type)
{
	if (soap_out___ns1__OIWebServiceLotStart(soap, tag ? tag : "-ns1:OIWebServiceLotStart", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_get___ns1__OIWebServiceLotStart(struct soap *soap, struct __ns1__OIWebServiceLotStart *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OIWebServiceLotStart(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebEquipmentStatusCheck(struct soap *soap, struct __ns1__OIWebEquipmentStatusCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OIWebEquipmentStatusCheck = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebEquipmentStatusCheck(struct soap *soap, const struct __ns1__OIWebEquipmentStatusCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, &a->ns1__OIWebEquipmentStatusCheck);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *tag, int id, const struct __ns1__OIWebEquipmentStatusCheck *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, "ns1:OIWebEquipmentStatusCheck", -1, &a->ns1__OIWebEquipmentStatusCheck, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_in___ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *tag, struct __ns1__OIWebEquipmentStatusCheck *a, const char *type)
{
	size_t soap_flag_ns1__OIWebEquipmentStatusCheck = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OIWebEquipmentStatusCheck *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OIWebEquipmentStatusCheck, sizeof(struct __ns1__OIWebEquipmentStatusCheck), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OIWebEquipmentStatusCheck(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OIWebEquipmentStatusCheck && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, "ns1:OIWebEquipmentStatusCheck", &a->ns1__OIWebEquipmentStatusCheck, ""))
				{	soap_flag_ns1__OIWebEquipmentStatusCheck--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__OIWebEquipmentStatusCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebEquipmentStatusCheck(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate___ns1__OIWebEquipmentStatusCheck(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__OIWebEquipmentStatusCheck *p;
	size_t k = sizeof(struct __ns1__OIWebEquipmentStatusCheck);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__OIWebEquipmentStatusCheck);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__OIWebEquipmentStatusCheck, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__OIWebEquipmentStatusCheck location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__OIWebEquipmentStatusCheck, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebEquipmentStatusCheck(struct soap *soap, const struct __ns1__OIWebEquipmentStatusCheck *a, const char *tag, const char *type)
{
	if (soap_out___ns1__OIWebEquipmentStatusCheck(soap, tag ? tag : "-ns1:OIWebEquipmentStatusCheck", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_get___ns1__OIWebEquipmentStatusCheck(struct soap *soap, struct __ns1__OIWebEquipmentStatusCheck *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OIWebEquipmentStatusCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebServiceLotStartCheck(struct soap *soap, struct __ns1__OIWebServiceLotStartCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OIWebServiceLotStartCheck = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebServiceLotStartCheck(struct soap *soap, const struct __ns1__OIWebServiceLotStartCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OIWebServiceLotStartCheck(soap, &a->ns1__OIWebServiceLotStartCheck);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *tag, int id, const struct __ns1__OIWebServiceLotStartCheck *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__OIWebServiceLotStartCheck(soap, "ns1:OIWebServiceLotStartCheck", -1, &a->ns1__OIWebServiceLotStartCheck, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_in___ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *tag, struct __ns1__OIWebServiceLotStartCheck *a, const char *type)
{
	size_t soap_flag_ns1__OIWebServiceLotStartCheck = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OIWebServiceLotStartCheck *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OIWebServiceLotStartCheck, sizeof(struct __ns1__OIWebServiceLotStartCheck), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OIWebServiceLotStartCheck(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OIWebServiceLotStartCheck && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OIWebServiceLotStartCheck(soap, "ns1:OIWebServiceLotStartCheck", &a->ns1__OIWebServiceLotStartCheck, ""))
				{	soap_flag_ns1__OIWebServiceLotStartCheck--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__OIWebServiceLotStartCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceLotStartCheck(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate___ns1__OIWebServiceLotStartCheck(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__OIWebServiceLotStartCheck *p;
	size_t k = sizeof(struct __ns1__OIWebServiceLotStartCheck);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__OIWebServiceLotStartCheck);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__OIWebServiceLotStartCheck, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__OIWebServiceLotStartCheck location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__OIWebServiceLotStartCheck, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebServiceLotStartCheck(struct soap *soap, const struct __ns1__OIWebServiceLotStartCheck *a, const char *tag, const char *type)
{
	if (soap_out___ns1__OIWebServiceLotStartCheck(soap, tag ? tag : "-ns1:OIWebServiceLotStartCheck", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_get___ns1__OIWebServiceLotStartCheck(struct soap *soap, struct __ns1__OIWebServiceLotStartCheck *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OIWebServiceLotStartCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebServiceCheck(struct soap *soap, struct __ns1__OIWebServiceCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OIWebServiceCheck = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebServiceCheck(struct soap *soap, const struct __ns1__OIWebServiceCheck *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OIWebServiceCheck(soap, &a->ns1__OIWebServiceCheck);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebServiceCheck(struct soap *soap, const char *tag, int id, const struct __ns1__OIWebServiceCheck *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__OIWebServiceCheck(soap, "ns1:OIWebServiceCheck", -1, &a->ns1__OIWebServiceCheck, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebServiceCheck * SOAP_FMAC4 soap_in___ns1__OIWebServiceCheck(struct soap *soap, const char *tag, struct __ns1__OIWebServiceCheck *a, const char *type)
{
	size_t soap_flag_ns1__OIWebServiceCheck = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OIWebServiceCheck *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OIWebServiceCheck, sizeof(struct __ns1__OIWebServiceCheck), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OIWebServiceCheck(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OIWebServiceCheck && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OIWebServiceCheck(soap, "ns1:OIWebServiceCheck", &a->ns1__OIWebServiceCheck, ""))
				{	soap_flag_ns1__OIWebServiceCheck--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__OIWebServiceCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceCheck(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate___ns1__OIWebServiceCheck(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__OIWebServiceCheck *p;
	size_t k = sizeof(struct __ns1__OIWebServiceCheck);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__OIWebServiceCheck);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__OIWebServiceCheck, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__OIWebServiceCheck location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__OIWebServiceCheck, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebServiceCheck(struct soap *soap, const struct __ns1__OIWebServiceCheck *a, const char *tag, const char *type)
{
	if (soap_out___ns1__OIWebServiceCheck(soap, tag ? tag : "-ns1:OIWebServiceCheck", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OIWebServiceCheck * SOAP_FMAC4 soap_get___ns1__OIWebServiceCheck(struct soap *soap, struct __ns1__OIWebServiceCheck *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OIWebServiceCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebEquipmentStatus(struct soap *soap, _ns1__OIWebEquipmentStatus *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OIWebEquipmentStatus))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebEquipmentStatus(struct soap *soap, const char *tag, int id, _ns1__OIWebEquipmentStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OIWebEquipmentStatus, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatus ? type : NULL);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebEquipmentStatus(struct soap *soap, const char *tag, _ns1__OIWebEquipmentStatus **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OIWebEquipmentStatus **)soap_malloc(soap, sizeof(_ns1__OIWebEquipmentStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OIWebEquipmentStatus *)oisystem_instantiate__ns1__OIWebEquipmentStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__OIWebEquipmentStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OIWebEquipmentStatus, sizeof(_ns1__OIWebEquipmentStatus), 0, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebEquipmentStatus(struct soap *soap, _ns1__OIWebEquipmentStatus *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__OIWebEquipmentStatus(soap, tag ? tag : "ns1:OIWebEquipmentStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebEquipmentStatus(struct soap *soap, _ns1__OIWebEquipmentStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OIWebEquipmentStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceLotStart(struct soap *soap, _ns1__OIWebServiceLotStart *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OIWebServiceLotStart))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceLotStart(struct soap *soap, const char *tag, int id, _ns1__OIWebServiceLotStart *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OIWebServiceLotStart, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStart ? type : NULL);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStart ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceLotStart(struct soap *soap, const char *tag, _ns1__OIWebServiceLotStart **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OIWebServiceLotStart **)soap_malloc(soap, sizeof(_ns1__OIWebServiceLotStart *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OIWebServiceLotStart *)oisystem_instantiate__ns1__OIWebServiceLotStart(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__OIWebServiceLotStart **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OIWebServiceLotStart, sizeof(_ns1__OIWebServiceLotStart), 0, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceLotStart(struct soap *soap, _ns1__OIWebServiceLotStart *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__OIWebServiceLotStart(soap, tag ? tag : "ns1:OIWebServiceLotStart", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStart ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceLotStart(struct soap *soap, _ns1__OIWebServiceLotStart **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OIWebServiceLotStart(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap *soap, _ns1__OIWebEquipmentStatusCheck *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *tag, int id, _ns1__OIWebEquipmentStatusCheck *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusCheck ? type : NULL);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *tag, _ns1__OIWebEquipmentStatusCheck **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OIWebEquipmentStatusCheck **)soap_malloc(soap, sizeof(_ns1__OIWebEquipmentStatusCheck *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OIWebEquipmentStatusCheck *)oisystem_instantiate__ns1__OIWebEquipmentStatusCheck(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__OIWebEquipmentStatusCheck **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OIWebEquipmentStatusCheck, sizeof(_ns1__OIWebEquipmentStatusCheck), 0, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap *soap, _ns1__OIWebEquipmentStatusCheck *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, tag ? tag : "ns1:OIWebEquipmentStatusCheck", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap *soap, _ns1__OIWebEquipmentStatusCheck **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OIWebEquipmentStatusCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap *soap, _ns1__OIWebServiceLotStartCheck *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OIWebServiceLotStartCheck))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *tag, int id, _ns1__OIWebServiceLotStartCheck *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OIWebServiceLotStartCheck, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartCheck ? type : NULL);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *tag, _ns1__OIWebServiceLotStartCheck **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OIWebServiceLotStartCheck **)soap_malloc(soap, sizeof(_ns1__OIWebServiceLotStartCheck *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OIWebServiceLotStartCheck *)oisystem_instantiate__ns1__OIWebServiceLotStartCheck(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__OIWebServiceLotStartCheck **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OIWebServiceLotStartCheck, sizeof(_ns1__OIWebServiceLotStartCheck), 0, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap *soap, _ns1__OIWebServiceLotStartCheck *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__OIWebServiceLotStartCheck(soap, tag ? tag : "ns1:OIWebServiceLotStartCheck", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap *soap, _ns1__OIWebServiceLotStartCheck **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OIWebServiceLotStartCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceCheck(struct soap *soap, _ns1__OIWebServiceCheck *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OIWebServiceCheck))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceCheck(struct soap *soap, const char *tag, int id, _ns1__OIWebServiceCheck *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OIWebServiceCheck, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheck ? type : NULL);
}

SOAP_FMAC3 _ns1__OIWebServiceCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceCheck(struct soap *soap, const char *tag, _ns1__OIWebServiceCheck **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OIWebServiceCheck **)soap_malloc(soap, sizeof(_ns1__OIWebServiceCheck *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OIWebServiceCheck *)oisystem_instantiate__ns1__OIWebServiceCheck(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__OIWebServiceCheck **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OIWebServiceCheck, sizeof(_ns1__OIWebServiceCheck), 0, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceCheck(struct soap *soap, _ns1__OIWebServiceCheck *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__OIWebServiceCheck(soap, tag ? tag : "ns1:OIWebServiceCheck", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OIWebServiceCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceCheck(struct soap *soap, _ns1__OIWebServiceCheck **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OIWebServiceCheck(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, const char *tag, int id, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ? type : NULL);
}

SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, const char *tag, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult **)soap_malloc(soap, sizeof(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *)oisystem_instantiate__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult, sizeof(_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult), 0, oisystem_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, tag ? tag : "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default__QName(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap *soap, const std::vector<char *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, int id, const std::vector<char *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<char *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_outliteral(soap, tag, (char*const*)&(*i), NULL))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, std::vector<char *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_XML(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		char *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__XML, SOAP_TYPE_std__vectorTemplateOf_XML, sizeof(char *), 1, oisystem_finsert, oisystem_fbase))
				break;
			if (!soap_inliteral(soap, tag, NULL))
				break;
		}
		else
		{	if (!soap_inliteral(soap, tag, &n))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 oisystem_instantiate_std__vectorTemplateOf_XML(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "oisystem_instantiate_std__vectorTemplateOf_XML(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<char *> *p;
	size_t k = sizeof(std::vector<char *> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<char *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<char *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<char *>  location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOf_XML, n, oisystem_fdelete);
	if (size)
		*size = k;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of oisystemC.cpp */
