/* oisystemOIWebServiceSoapProxy.cpp
   Generated by gSOAP 2.8.40 for oisystem.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "oisystemOIWebServiceSoapProxy.h"

OIWebServiceSoapProxy::OIWebServiceSoapProxy() : soap(SOAP_IO_DEFAULT)
{	OIWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

OIWebServiceSoapProxy::OIWebServiceSoapProxy(const OIWebServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

OIWebServiceSoapProxy::OIWebServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

OIWebServiceSoapProxy::OIWebServiceSoapProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	OIWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

OIWebServiceSoapProxy::OIWebServiceSoapProxy(soap_mode iomode) : soap(iomode)
{	OIWebServiceSoapProxy_init(iomode, iomode);
}

OIWebServiceSoapProxy::OIWebServiceSoapProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	OIWebServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

OIWebServiceSoapProxy::OIWebServiceSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	OIWebServiceSoapProxy_init(imode, omode);
}

OIWebServiceSoapProxy::~OIWebServiceSoapProxy()
{
	this->destroy();
	}

void OIWebServiceSoapProxy::OIWebServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://www.neoslon.net/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
OIWebServiceSoapProxy *OIWebServiceSoapProxy::copy()
{	OIWebServiceSoapProxy *dup = SOAP_NEW_COPY(OIWebServiceSoapProxy(*(struct soap*)this));
	return dup;
}
#endif

OIWebServiceSoapProxy& OIWebServiceSoapProxy::operator=(const OIWebServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void OIWebServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void OIWebServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	OIWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void OIWebServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *OIWebServiceSoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *OIWebServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *OIWebServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *OIWebServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int OIWebServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int OIWebServiceSoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void OIWebServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void OIWebServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *OIWebServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int OIWebServiceSoapProxy::OIWebServiceCheck(const char *endpoint, const char *soap_action, _ns1__OIWebServiceCheck *ns1__OIWebServiceCheck, _ns1__OIWebServiceCheckResponse &ns1__OIWebServiceCheckResponse)
{	struct soap *soap = this;
	struct __ns1__OIWebServiceCheck soap_tmp___ns1__OIWebServiceCheck;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.20.10.235:5200/OIWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://www.neoslon.net/OIWebServiceCheck";
	soap_tmp___ns1__OIWebServiceCheck.ns1__OIWebServiceCheck = ns1__OIWebServiceCheck;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__OIWebServiceCheck(soap, &soap_tmp___ns1__OIWebServiceCheck);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OIWebServiceCheck(soap, &soap_tmp___ns1__OIWebServiceCheck, "-ns1:OIWebServiceCheck", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OIWebServiceCheck(soap, &soap_tmp___ns1__OIWebServiceCheck, "-ns1:OIWebServiceCheck", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__OIWebServiceCheckResponse*>(&ns1__OIWebServiceCheckResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__OIWebServiceCheckResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OIWebServiceCheckResponse.soap_get(soap, "ns1:OIWebServiceCheckResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int OIWebServiceSoapProxy::OIWebServiceLotStartCheck(const char *endpoint, const char *soap_action, _ns1__OIWebServiceLotStartCheck *ns1__OIWebServiceLotStartCheck, _ns1__OIWebServiceLotStartCheckResponse &ns1__OIWebServiceLotStartCheckResponse)
{	struct soap *soap = this;
	struct __ns1__OIWebServiceLotStartCheck soap_tmp___ns1__OIWebServiceLotStartCheck;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.20.10.235:5200/OIWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://www.neoslon.net/OIWebServiceLotStartCheck";
	soap_tmp___ns1__OIWebServiceLotStartCheck.ns1__OIWebServiceLotStartCheck = ns1__OIWebServiceLotStartCheck;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__OIWebServiceLotStartCheck(soap, &soap_tmp___ns1__OIWebServiceLotStartCheck);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OIWebServiceLotStartCheck(soap, &soap_tmp___ns1__OIWebServiceLotStartCheck, "-ns1:OIWebServiceLotStartCheck", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OIWebServiceLotStartCheck(soap, &soap_tmp___ns1__OIWebServiceLotStartCheck, "-ns1:OIWebServiceLotStartCheck", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__OIWebServiceLotStartCheckResponse*>(&ns1__OIWebServiceLotStartCheckResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__OIWebServiceLotStartCheckResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OIWebServiceLotStartCheckResponse.soap_get(soap, "ns1:OIWebServiceLotStartCheckResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int OIWebServiceSoapProxy::OIWebEquipmentStatusCheck(const char *endpoint, const char *soap_action, _ns1__OIWebEquipmentStatusCheck *ns1__OIWebEquipmentStatusCheck, _ns1__OIWebEquipmentStatusCheckResponse &ns1__OIWebEquipmentStatusCheckResponse)
{	struct soap *soap = this;
	struct __ns1__OIWebEquipmentStatusCheck soap_tmp___ns1__OIWebEquipmentStatusCheck;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.20.10.235:5200/OIWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://www.neoslon.net/OIWebEquipmentStatusCheck";
	soap_tmp___ns1__OIWebEquipmentStatusCheck.ns1__OIWebEquipmentStatusCheck = ns1__OIWebEquipmentStatusCheck;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__OIWebEquipmentStatusCheck(soap, &soap_tmp___ns1__OIWebEquipmentStatusCheck);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OIWebEquipmentStatusCheck(soap, &soap_tmp___ns1__OIWebEquipmentStatusCheck, "-ns1:OIWebEquipmentStatusCheck", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OIWebEquipmentStatusCheck(soap, &soap_tmp___ns1__OIWebEquipmentStatusCheck, "-ns1:OIWebEquipmentStatusCheck", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__OIWebEquipmentStatusCheckResponse*>(&ns1__OIWebEquipmentStatusCheckResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__OIWebEquipmentStatusCheckResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OIWebEquipmentStatusCheckResponse.soap_get(soap, "ns1:OIWebEquipmentStatusCheckResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int OIWebServiceSoapProxy::OIWebServiceLotStart(const char *endpoint, const char *soap_action, _ns1__OIWebServiceLotStart *ns1__OIWebServiceLotStart, _ns1__OIWebServiceLotStartResponse &ns1__OIWebServiceLotStartResponse)
{	struct soap *soap = this;
	struct __ns1__OIWebServiceLotStart soap_tmp___ns1__OIWebServiceLotStart;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.20.10.235:5200/OIWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://www.neoslon.net/OIWebServiceLotStart";
	soap_tmp___ns1__OIWebServiceLotStart.ns1__OIWebServiceLotStart = ns1__OIWebServiceLotStart;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__OIWebServiceLotStart(soap, &soap_tmp___ns1__OIWebServiceLotStart);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OIWebServiceLotStart(soap, &soap_tmp___ns1__OIWebServiceLotStart, "-ns1:OIWebServiceLotStart", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OIWebServiceLotStart(soap, &soap_tmp___ns1__OIWebServiceLotStart, "-ns1:OIWebServiceLotStart", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__OIWebServiceLotStartResponse*>(&ns1__OIWebServiceLotStartResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__OIWebServiceLotStartResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OIWebServiceLotStartResponse.soap_get(soap, "ns1:OIWebServiceLotStartResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int OIWebServiceSoapProxy::OIWebEquipmentStatus(const char *endpoint, const char *soap_action, _ns1__OIWebEquipmentStatus *ns1__OIWebEquipmentStatus, _ns1__OIWebEquipmentStatusResponse &ns1__OIWebEquipmentStatusResponse)
{	struct soap *soap = this;
	struct __ns1__OIWebEquipmentStatus soap_tmp___ns1__OIWebEquipmentStatus;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://10.20.10.235:5200/OIWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://www.neoslon.net/OIWebEquipmentStatus";
	soap_tmp___ns1__OIWebEquipmentStatus.ns1__OIWebEquipmentStatus = ns1__OIWebEquipmentStatus;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__OIWebEquipmentStatus(soap, &soap_tmp___ns1__OIWebEquipmentStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OIWebEquipmentStatus(soap, &soap_tmp___ns1__OIWebEquipmentStatus, "-ns1:OIWebEquipmentStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OIWebEquipmentStatus(soap, &soap_tmp___ns1__OIWebEquipmentStatus, "-ns1:OIWebEquipmentStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__OIWebEquipmentStatusResponse*>(&ns1__OIWebEquipmentStatusResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__OIWebEquipmentStatusResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OIWebEquipmentStatusResponse.soap_get(soap, "ns1:OIWebEquipmentStatusResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
