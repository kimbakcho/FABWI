/* oisystemH.h
   Generated by gSOAP 2.8.40 for oisystem.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef oisystemH_H
#define oisystemH_H
#include "oisystemStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 oisystem_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 oisystem_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 oisystem_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 oisystem_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult_DEFINED
#define SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, const char*, int, const _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *, const char*);
SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * SOAP_FMAC4 soap_in__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, const char*, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *, const char*);
SOAP_FMAC1 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * soap_new__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * soap_new_req__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(
	struct soap *soap)
{
	_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *_p = soap_new__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * soap_new_set__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *_p = soap_new__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any = __any;
		_p->_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, const char *URL, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, const char *URL, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheckResponse-OIWebServiceCheckResult", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult * SOAP_FMAC4 soap_get__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *, const char*, const char*);

inline int soap_read__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, const char *URL, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap *soap, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *p)
{
	if (soap_read__ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 oisystem_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return oisystem_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusResponse_DEFINED
#define SOAP_TYPE__ns1__OIWebEquipmentStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatusResponse(struct soap*, const char*, int, const _ns1__OIWebEquipmentStatusResponse *, const char*);
SOAP_FMAC3 _ns1__OIWebEquipmentStatusResponse * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatusResponse(struct soap*, const char*, _ns1__OIWebEquipmentStatusResponse *, const char*);
SOAP_FMAC1 _ns1__OIWebEquipmentStatusResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebEquipmentStatusResponse * soap_new__ns1__OIWebEquipmentStatusResponse(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebEquipmentStatusResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebEquipmentStatusResponse * soap_new_req__ns1__OIWebEquipmentStatusResponse(
	struct soap *soap,
	bool OIWebEquipmentStatusResult)
{
	_ns1__OIWebEquipmentStatusResponse *_p = soap_new__ns1__OIWebEquipmentStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebEquipmentStatusResponse::OIWebEquipmentStatusResult = OIWebEquipmentStatusResult;
	}
	return _p;
}

inline _ns1__OIWebEquipmentStatusResponse * soap_new_set__ns1__OIWebEquipmentStatusResponse(
	struct soap *soap,
	bool OIWebEquipmentStatusResult,
	std::string *resultMessage)
{
	_ns1__OIWebEquipmentStatusResponse *_p = soap_new__ns1__OIWebEquipmentStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebEquipmentStatusResponse::OIWebEquipmentStatusResult = OIWebEquipmentStatusResult;
		_p->_ns1__OIWebEquipmentStatusResponse::resultMessage = resultMessage;
	}
	return _p;
}

inline int soap_write__ns1__OIWebEquipmentStatusResponse(struct soap *soap, _ns1__OIWebEquipmentStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebEquipmentStatusResponse(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebEquipmentStatusResponse(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebEquipmentStatusResponse * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatusResponse(struct soap*, _ns1__OIWebEquipmentStatusResponse *, const char*, const char*);

inline int soap_read__ns1__OIWebEquipmentStatusResponse(struct soap *soap, _ns1__OIWebEquipmentStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebEquipmentStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebEquipmentStatusResponse(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebEquipmentStatusResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebEquipmentStatusResponse(struct soap *soap, _ns1__OIWebEquipmentStatusResponse *p)
{
	if (soap_read__ns1__OIWebEquipmentStatusResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatus_DEFINED
#define SOAP_TYPE__ns1__OIWebEquipmentStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatus(struct soap*, const char*, int, const _ns1__OIWebEquipmentStatus *, const char*);
SOAP_FMAC3 _ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatus(struct soap*, const char*, _ns1__OIWebEquipmentStatus *, const char*);
SOAP_FMAC1 _ns1__OIWebEquipmentStatus * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatus(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebEquipmentStatus * soap_new__ns1__OIWebEquipmentStatus(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebEquipmentStatus(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebEquipmentStatus * soap_new_req__ns1__OIWebEquipmentStatus(
	struct soap *soap)
{
	_ns1__OIWebEquipmentStatus *_p = soap_new__ns1__OIWebEquipmentStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OIWebEquipmentStatus * soap_new_set__ns1__OIWebEquipmentStatus(
	struct soap *soap,
	std::string *siteId,
	std::string *equipmentId,
	std::string *eventId,
	std::string *languageId,
	std::string *userId,
	std::string *resultMessage)
{
	_ns1__OIWebEquipmentStatus *_p = soap_new__ns1__OIWebEquipmentStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebEquipmentStatus::siteId = siteId;
		_p->_ns1__OIWebEquipmentStatus::equipmentId = equipmentId;
		_p->_ns1__OIWebEquipmentStatus::eventId = eventId;
		_p->_ns1__OIWebEquipmentStatus::languageId = languageId;
		_p->_ns1__OIWebEquipmentStatus::userId = userId;
		_p->_ns1__OIWebEquipmentStatus::resultMessage = resultMessage;
	}
	return _p;
}

inline int soap_write__ns1__OIWebEquipmentStatus(struct soap *soap, _ns1__OIWebEquipmentStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatus", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebEquipmentStatus(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatus", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebEquipmentStatus(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatus", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatus(struct soap*, _ns1__OIWebEquipmentStatus *, const char*, const char*);

inline int soap_read__ns1__OIWebEquipmentStatus(struct soap *soap, _ns1__OIWebEquipmentStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebEquipmentStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebEquipmentStatus(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebEquipmentStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebEquipmentStatus(struct soap *soap, _ns1__OIWebEquipmentStatus *p)
{
	if (soap_read__ns1__OIWebEquipmentStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartResponse_DEFINED
#define SOAP_TYPE__ns1__OIWebServiceLotStartResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStartResponse(struct soap*, const char*, int, const _ns1__OIWebServiceLotStartResponse *, const char*);
SOAP_FMAC3 _ns1__OIWebServiceLotStartResponse * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStartResponse(struct soap*, const char*, _ns1__OIWebServiceLotStartResponse *, const char*);
SOAP_FMAC1 _ns1__OIWebServiceLotStartResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebServiceLotStartResponse * soap_new__ns1__OIWebServiceLotStartResponse(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebServiceLotStartResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebServiceLotStartResponse * soap_new_req__ns1__OIWebServiceLotStartResponse(
	struct soap *soap,
	bool OIWebServiceLotStartResult)
{
	_ns1__OIWebServiceLotStartResponse *_p = soap_new__ns1__OIWebServiceLotStartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceLotStartResponse::OIWebServiceLotStartResult = OIWebServiceLotStartResult;
	}
	return _p;
}

inline _ns1__OIWebServiceLotStartResponse * soap_new_set__ns1__OIWebServiceLotStartResponse(
	struct soap *soap,
	bool OIWebServiceLotStartResult,
	std::string *resultMessage)
{
	_ns1__OIWebServiceLotStartResponse *_p = soap_new__ns1__OIWebServiceLotStartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceLotStartResponse::OIWebServiceLotStartResult = OIWebServiceLotStartResult;
		_p->_ns1__OIWebServiceLotStartResponse::resultMessage = resultMessage;
	}
	return _p;
}

inline int soap_write__ns1__OIWebServiceLotStartResponse(struct soap *soap, _ns1__OIWebServiceLotStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebServiceLotStartResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebServiceLotStartResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebServiceLotStartResponse * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStartResponse(struct soap*, _ns1__OIWebServiceLotStartResponse *, const char*, const char*);

inline int soap_read__ns1__OIWebServiceLotStartResponse(struct soap *soap, _ns1__OIWebServiceLotStartResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebServiceLotStartResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebServiceLotStartResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebServiceLotStartResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebServiceLotStartResponse(struct soap *soap, _ns1__OIWebServiceLotStartResponse *p)
{
	if (soap_read__ns1__OIWebServiceLotStartResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebServiceLotStart_DEFINED
#define SOAP_TYPE__ns1__OIWebServiceLotStart_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStart(struct soap*, const char*, int, const _ns1__OIWebServiceLotStart *, const char*);
SOAP_FMAC3 _ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStart(struct soap*, const char*, _ns1__OIWebServiceLotStart *, const char*);
SOAP_FMAC1 _ns1__OIWebServiceLotStart * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStart(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebServiceLotStart * soap_new__ns1__OIWebServiceLotStart(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebServiceLotStart(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebServiceLotStart * soap_new_req__ns1__OIWebServiceLotStart(
	struct soap *soap)
{
	_ns1__OIWebServiceLotStart *_p = soap_new__ns1__OIWebServiceLotStart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OIWebServiceLotStart * soap_new_set__ns1__OIWebServiceLotStart(
	struct soap *soap,
	std::string *siteId,
	std::string *lotId,
	std::string *operationId,
	std::string *equipmentId,
	std::string *languageId,
	std::string *userId,
	std::string *resultMessage)
{
	_ns1__OIWebServiceLotStart *_p = soap_new__ns1__OIWebServiceLotStart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceLotStart::siteId = siteId;
		_p->_ns1__OIWebServiceLotStart::lotId = lotId;
		_p->_ns1__OIWebServiceLotStart::operationId = operationId;
		_p->_ns1__OIWebServiceLotStart::equipmentId = equipmentId;
		_p->_ns1__OIWebServiceLotStart::languageId = languageId;
		_p->_ns1__OIWebServiceLotStart::userId = userId;
		_p->_ns1__OIWebServiceLotStart::resultMessage = resultMessage;
	}
	return _p;
}

inline int soap_write__ns1__OIWebServiceLotStart(struct soap *soap, _ns1__OIWebServiceLotStart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStart", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebServiceLotStart(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStart", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebServiceLotStart(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStart", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStart ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStart(struct soap*, _ns1__OIWebServiceLotStart *, const char*, const char*);

inline int soap_read__ns1__OIWebServiceLotStart(struct soap *soap, _ns1__OIWebServiceLotStart *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebServiceLotStart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebServiceLotStart(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebServiceLotStart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebServiceLotStart(struct soap *soap, _ns1__OIWebServiceLotStart *p)
{
	if (soap_read__ns1__OIWebServiceLotStart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse_DEFINED
#define SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatusCheckResponse(struct soap*, const char*, int, const _ns1__OIWebEquipmentStatusCheckResponse *, const char*);
SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheckResponse * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatusCheckResponse(struct soap*, const char*, _ns1__OIWebEquipmentStatusCheckResponse *, const char*);
SOAP_FMAC1 _ns1__OIWebEquipmentStatusCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusCheckResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebEquipmentStatusCheckResponse * soap_new__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebEquipmentStatusCheckResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebEquipmentStatusCheckResponse * soap_new_req__ns1__OIWebEquipmentStatusCheckResponse(
	struct soap *soap,
	bool OIWebEquipmentStatusCheckResult)
{
	_ns1__OIWebEquipmentStatusCheckResponse *_p = soap_new__ns1__OIWebEquipmentStatusCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebEquipmentStatusCheckResponse::OIWebEquipmentStatusCheckResult = OIWebEquipmentStatusCheckResult;
	}
	return _p;
}

inline _ns1__OIWebEquipmentStatusCheckResponse * soap_new_set__ns1__OIWebEquipmentStatusCheckResponse(
	struct soap *soap,
	bool OIWebEquipmentStatusCheckResult)
{
	_ns1__OIWebEquipmentStatusCheckResponse *_p = soap_new__ns1__OIWebEquipmentStatusCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebEquipmentStatusCheckResponse::OIWebEquipmentStatusCheckResult = OIWebEquipmentStatusCheckResult;
	}
	return _p;
}

inline int soap_write__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, _ns1__OIWebEquipmentStatusCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheckResponse * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatusCheckResponse(struct soap*, _ns1__OIWebEquipmentStatusCheckResponse *, const char*, const char*);

inline int soap_read__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, _ns1__OIWebEquipmentStatusCheckResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebEquipmentStatusCheckResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusCheckResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebEquipmentStatusCheckResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebEquipmentStatusCheckResponse(struct soap *soap, _ns1__OIWebEquipmentStatusCheckResponse *p)
{
	if (soap_read__ns1__OIWebEquipmentStatusCheckResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebEquipmentStatusCheck_DEFINED
#define SOAP_TYPE__ns1__OIWebEquipmentStatusCheck_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebEquipmentStatusCheck(struct soap*, const char*, int, const _ns1__OIWebEquipmentStatusCheck *, const char*);
SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_in__ns1__OIWebEquipmentStatusCheck(struct soap*, const char*, _ns1__OIWebEquipmentStatusCheck *, const char*);
SOAP_FMAC1 _ns1__OIWebEquipmentStatusCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebEquipmentStatusCheck(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebEquipmentStatusCheck * soap_new__ns1__OIWebEquipmentStatusCheck(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebEquipmentStatusCheck(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebEquipmentStatusCheck * soap_new_req__ns1__OIWebEquipmentStatusCheck(
	struct soap *soap)
{
	_ns1__OIWebEquipmentStatusCheck *_p = soap_new__ns1__OIWebEquipmentStatusCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OIWebEquipmentStatusCheck * soap_new_set__ns1__OIWebEquipmentStatusCheck(
	struct soap *soap,
	std::string *siteId,
	std::string *equipmentId,
	std::string *eventId,
	std::string *languageId,
	std::string *userId)
{
	_ns1__OIWebEquipmentStatusCheck *_p = soap_new__ns1__OIWebEquipmentStatusCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebEquipmentStatusCheck::siteId = siteId;
		_p->_ns1__OIWebEquipmentStatusCheck::equipmentId = equipmentId;
		_p->_ns1__OIWebEquipmentStatusCheck::eventId = eventId;
		_p->_ns1__OIWebEquipmentStatusCheck::languageId = languageId;
		_p->_ns1__OIWebEquipmentStatusCheck::userId = userId;
	}
	return _p;
}

inline int soap_write__ns1__OIWebEquipmentStatusCheck(struct soap *soap, _ns1__OIWebEquipmentStatusCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebEquipmentStatusCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebEquipmentStatusCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_get__ns1__OIWebEquipmentStatusCheck(struct soap*, _ns1__OIWebEquipmentStatusCheck *, const char*, const char*);

inline int soap_read__ns1__OIWebEquipmentStatusCheck(struct soap *soap, _ns1__OIWebEquipmentStatusCheck *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebEquipmentStatusCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *URL, _ns1__OIWebEquipmentStatusCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebEquipmentStatusCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebEquipmentStatusCheck(struct soap *soap, _ns1__OIWebEquipmentStatusCheck *p)
{
	if (soap_read__ns1__OIWebEquipmentStatusCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse_DEFINED
#define SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStartCheckResponse(struct soap*, const char*, int, const _ns1__OIWebServiceLotStartCheckResponse *, const char*);
SOAP_FMAC3 _ns1__OIWebServiceLotStartCheckResponse * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStartCheckResponse(struct soap*, const char*, _ns1__OIWebServiceLotStartCheckResponse *, const char*);
SOAP_FMAC1 _ns1__OIWebServiceLotStartCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartCheckResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebServiceLotStartCheckResponse * soap_new__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebServiceLotStartCheckResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebServiceLotStartCheckResponse * soap_new_req__ns1__OIWebServiceLotStartCheckResponse(
	struct soap *soap,
	bool OIWebServiceLotStartCheckResult)
{
	_ns1__OIWebServiceLotStartCheckResponse *_p = soap_new__ns1__OIWebServiceLotStartCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceLotStartCheckResponse::OIWebServiceLotStartCheckResult = OIWebServiceLotStartCheckResult;
	}
	return _p;
}

inline _ns1__OIWebServiceLotStartCheckResponse * soap_new_set__ns1__OIWebServiceLotStartCheckResponse(
	struct soap *soap,
	bool OIWebServiceLotStartCheckResult)
{
	_ns1__OIWebServiceLotStartCheckResponse *_p = soap_new__ns1__OIWebServiceLotStartCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceLotStartCheckResponse::OIWebServiceLotStartCheckResult = OIWebServiceLotStartCheckResult;
	}
	return _p;
}

inline int soap_write__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, _ns1__OIWebServiceLotStartCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebServiceLotStartCheckResponse * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStartCheckResponse(struct soap*, _ns1__OIWebServiceLotStartCheckResponse *, const char*, const char*);

inline int soap_read__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, _ns1__OIWebServiceLotStartCheckResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebServiceLotStartCheckResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartCheckResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebServiceLotStartCheckResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebServiceLotStartCheckResponse(struct soap *soap, _ns1__OIWebServiceLotStartCheckResponse *p)
{
	if (soap_read__ns1__OIWebServiceLotStartCheckResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebServiceLotStartCheck_DEFINED
#define SOAP_TYPE__ns1__OIWebServiceLotStartCheck_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceLotStartCheck(struct soap*, const char*, int, const _ns1__OIWebServiceLotStartCheck *, const char*);
SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_in__ns1__OIWebServiceLotStartCheck(struct soap*, const char*, _ns1__OIWebServiceLotStartCheck *, const char*);
SOAP_FMAC1 _ns1__OIWebServiceLotStartCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceLotStartCheck(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebServiceLotStartCheck * soap_new__ns1__OIWebServiceLotStartCheck(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebServiceLotStartCheck(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebServiceLotStartCheck * soap_new_req__ns1__OIWebServiceLotStartCheck(
	struct soap *soap)
{
	_ns1__OIWebServiceLotStartCheck *_p = soap_new__ns1__OIWebServiceLotStartCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OIWebServiceLotStartCheck * soap_new_set__ns1__OIWebServiceLotStartCheck(
	struct soap *soap,
	std::string *siteId,
	std::string *lotId,
	std::string *operationId,
	std::string *equipmentId,
	std::string *languageId,
	std::string *userId)
{
	_ns1__OIWebServiceLotStartCheck *_p = soap_new__ns1__OIWebServiceLotStartCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceLotStartCheck::siteId = siteId;
		_p->_ns1__OIWebServiceLotStartCheck::lotId = lotId;
		_p->_ns1__OIWebServiceLotStartCheck::operationId = operationId;
		_p->_ns1__OIWebServiceLotStartCheck::equipmentId = equipmentId;
		_p->_ns1__OIWebServiceLotStartCheck::languageId = languageId;
		_p->_ns1__OIWebServiceLotStartCheck::userId = userId;
	}
	return _p;
}

inline int soap_write__ns1__OIWebServiceLotStartCheck(struct soap *soap, _ns1__OIWebServiceLotStartCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceLotStartCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceLotStartCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_get__ns1__OIWebServiceLotStartCheck(struct soap*, _ns1__OIWebServiceLotStartCheck *, const char*, const char*);

inline int soap_read__ns1__OIWebServiceLotStartCheck(struct soap *soap, _ns1__OIWebServiceLotStartCheck *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebServiceLotStartCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *URL, _ns1__OIWebServiceLotStartCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebServiceLotStartCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebServiceLotStartCheck(struct soap *soap, _ns1__OIWebServiceLotStartCheck *p)
{
	if (soap_read__ns1__OIWebServiceLotStartCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebServiceCheckResponse_DEFINED
#define SOAP_TYPE__ns1__OIWebServiceCheckResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceCheckResponse(struct soap*, const char*, int, const _ns1__OIWebServiceCheckResponse *, const char*);
SOAP_FMAC3 _ns1__OIWebServiceCheckResponse * SOAP_FMAC4 soap_in__ns1__OIWebServiceCheckResponse(struct soap*, const char*, _ns1__OIWebServiceCheckResponse *, const char*);
SOAP_FMAC1 _ns1__OIWebServiceCheckResponse * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheckResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebServiceCheckResponse * soap_new__ns1__OIWebServiceCheckResponse(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebServiceCheckResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebServiceCheckResponse * soap_new_req__ns1__OIWebServiceCheckResponse(
	struct soap *soap)
{
	_ns1__OIWebServiceCheckResponse *_p = soap_new__ns1__OIWebServiceCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OIWebServiceCheckResponse * soap_new_set__ns1__OIWebServiceCheckResponse(
	struct soap *soap,
	_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *OIWebServiceCheckResult)
{
	_ns1__OIWebServiceCheckResponse *_p = soap_new__ns1__OIWebServiceCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceCheckResponse::OIWebServiceCheckResult = OIWebServiceCheckResult;
	}
	return _p;
}

inline int soap_write__ns1__OIWebServiceCheckResponse(struct soap *soap, _ns1__OIWebServiceCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebServiceCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebServiceCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceCheckResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheckResponse", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheckResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebServiceCheckResponse * SOAP_FMAC4 soap_get__ns1__OIWebServiceCheckResponse(struct soap*, _ns1__OIWebServiceCheckResponse *, const char*, const char*);

inline int soap_read__ns1__OIWebServiceCheckResponse(struct soap *soap, _ns1__OIWebServiceCheckResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebServiceCheckResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebServiceCheckResponse(struct soap *soap, const char *URL, _ns1__OIWebServiceCheckResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebServiceCheckResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebServiceCheckResponse(struct soap *soap, _ns1__OIWebServiceCheckResponse *p)
{
	if (soap_read__ns1__OIWebServiceCheckResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__OIWebServiceCheck_DEFINED
#define SOAP_TYPE__ns1__OIWebServiceCheck_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OIWebServiceCheck(struct soap*, const char*, int, const _ns1__OIWebServiceCheck *, const char*);
SOAP_FMAC3 _ns1__OIWebServiceCheck * SOAP_FMAC4 soap_in__ns1__OIWebServiceCheck(struct soap*, const char*, _ns1__OIWebServiceCheck *, const char*);
SOAP_FMAC1 _ns1__OIWebServiceCheck * SOAP_FMAC2 oisystem_instantiate__ns1__OIWebServiceCheck(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OIWebServiceCheck * soap_new__ns1__OIWebServiceCheck(struct soap *soap, int n = -1)
{
	return oisystem_instantiate__ns1__OIWebServiceCheck(soap, n, NULL, NULL, NULL);
}

inline _ns1__OIWebServiceCheck * soap_new_req__ns1__OIWebServiceCheck(
	struct soap *soap)
{
	_ns1__OIWebServiceCheck *_p = soap_new__ns1__OIWebServiceCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__OIWebServiceCheck * soap_new_set__ns1__OIWebServiceCheck(
	struct soap *soap,
	std::string *lotId,
	std::string *operationId)
{
	_ns1__OIWebServiceCheck *_p = soap_new__ns1__OIWebServiceCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__OIWebServiceCheck::lotId = lotId;
		_p->_ns1__OIWebServiceCheck::operationId = operationId;
	}
	return _p;
}

inline int soap_write__ns1__OIWebServiceCheck(struct soap *soap, _ns1__OIWebServiceCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__OIWebServiceCheck(struct soap *soap, const char *URL, _ns1__OIWebServiceCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__OIWebServiceCheck(struct soap *soap, const char *URL, _ns1__OIWebServiceCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OIWebServiceCheck", p->soap_type() == SOAP_TYPE__ns1__OIWebServiceCheck ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__OIWebServiceCheck * SOAP_FMAC4 soap_get__ns1__OIWebServiceCheck(struct soap*, _ns1__OIWebServiceCheck *, const char*, const char*);

inline int soap_read__ns1__OIWebServiceCheck(struct soap *soap, _ns1__OIWebServiceCheck *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__OIWebServiceCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__OIWebServiceCheck(struct soap *soap, const char *URL, _ns1__OIWebServiceCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__OIWebServiceCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__OIWebServiceCheck(struct soap *soap, _ns1__OIWebServiceCheck *p)
{
	if (soap_read__ns1__OIWebServiceCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return oisystem_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return oisystem_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return oisystem_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return oisystem_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 oisystem_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return oisystem_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__OIWebEquipmentStatus_DEFINED
#define SOAP_TYPE___ns1__OIWebEquipmentStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebEquipmentStatus(struct soap*, struct __ns1__OIWebEquipmentStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebEquipmentStatus(struct soap*, const struct __ns1__OIWebEquipmentStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebEquipmentStatus(struct soap*, const char*, int, const struct __ns1__OIWebEquipmentStatus *, const char*);
SOAP_FMAC3 struct __ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_in___ns1__OIWebEquipmentStatus(struct soap*, const char*, struct __ns1__OIWebEquipmentStatus *, const char*);
SOAP_FMAC1 struct __ns1__OIWebEquipmentStatus * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebEquipmentStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OIWebEquipmentStatus * soap_new___ns1__OIWebEquipmentStatus(struct soap *soap, int n = -1)
{
	return oisystem_instantiate___ns1__OIWebEquipmentStatus(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OIWebEquipmentStatus * soap_new_req___ns1__OIWebEquipmentStatus(
	struct soap *soap)
{
	struct __ns1__OIWebEquipmentStatus *_p = soap_new___ns1__OIWebEquipmentStatus(soap);
	if (_p)
	{	soap_default___ns1__OIWebEquipmentStatus(soap, _p);
	}
	return _p;
}

inline struct __ns1__OIWebEquipmentStatus * soap_new_set___ns1__OIWebEquipmentStatus(
	struct soap *soap,
	_ns1__OIWebEquipmentStatus *ns1__OIWebEquipmentStatus)
{
	struct __ns1__OIWebEquipmentStatus *_p = soap_new___ns1__OIWebEquipmentStatus(soap);
	if (_p)
	{	soap_default___ns1__OIWebEquipmentStatus(soap, _p);
		_p->ns1__OIWebEquipmentStatus = ns1__OIWebEquipmentStatus;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebEquipmentStatus(struct soap*, const struct __ns1__OIWebEquipmentStatus *, const char*, const char*);

inline int soap_write___ns1__OIWebEquipmentStatus(struct soap *soap, struct __ns1__OIWebEquipmentStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OIWebEquipmentStatus(soap, p), 0) || soap_put___ns1__OIWebEquipmentStatus(soap, p, "-ns1:OIWebEquipmentStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OIWebEquipmentStatus(struct soap *soap, const char *URL, struct __ns1__OIWebEquipmentStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OIWebEquipmentStatus(soap, p), 0) || soap_put___ns1__OIWebEquipmentStatus(soap, p, "-ns1:OIWebEquipmentStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OIWebEquipmentStatus(struct soap *soap, const char *URL, struct __ns1__OIWebEquipmentStatus const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OIWebEquipmentStatus(soap, p), 0) || soap_put___ns1__OIWebEquipmentStatus(soap, p, "-ns1:OIWebEquipmentStatus", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OIWebEquipmentStatus * SOAP_FMAC4 soap_get___ns1__OIWebEquipmentStatus(struct soap*, struct __ns1__OIWebEquipmentStatus *, const char*, const char*);

inline int soap_read___ns1__OIWebEquipmentStatus(struct soap *soap, struct __ns1__OIWebEquipmentStatus *p)
{
	if (p)
	{	soap_default___ns1__OIWebEquipmentStatus(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OIWebEquipmentStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OIWebEquipmentStatus(struct soap *soap, const char *URL, struct __ns1__OIWebEquipmentStatus *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OIWebEquipmentStatus(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OIWebEquipmentStatus(struct soap *soap, struct __ns1__OIWebEquipmentStatus *p)
{
	if (soap_read___ns1__OIWebEquipmentStatus(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OIWebServiceLotStart_DEFINED
#define SOAP_TYPE___ns1__OIWebServiceLotStart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebServiceLotStart(struct soap*, struct __ns1__OIWebServiceLotStart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebServiceLotStart(struct soap*, const struct __ns1__OIWebServiceLotStart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebServiceLotStart(struct soap*, const char*, int, const struct __ns1__OIWebServiceLotStart *, const char*);
SOAP_FMAC3 struct __ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_in___ns1__OIWebServiceLotStart(struct soap*, const char*, struct __ns1__OIWebServiceLotStart *, const char*);
SOAP_FMAC1 struct __ns1__OIWebServiceLotStart * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceLotStart(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OIWebServiceLotStart * soap_new___ns1__OIWebServiceLotStart(struct soap *soap, int n = -1)
{
	return oisystem_instantiate___ns1__OIWebServiceLotStart(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OIWebServiceLotStart * soap_new_req___ns1__OIWebServiceLotStart(
	struct soap *soap)
{
	struct __ns1__OIWebServiceLotStart *_p = soap_new___ns1__OIWebServiceLotStart(soap);
	if (_p)
	{	soap_default___ns1__OIWebServiceLotStart(soap, _p);
	}
	return _p;
}

inline struct __ns1__OIWebServiceLotStart * soap_new_set___ns1__OIWebServiceLotStart(
	struct soap *soap,
	_ns1__OIWebServiceLotStart *ns1__OIWebServiceLotStart)
{
	struct __ns1__OIWebServiceLotStart *_p = soap_new___ns1__OIWebServiceLotStart(soap);
	if (_p)
	{	soap_default___ns1__OIWebServiceLotStart(soap, _p);
		_p->ns1__OIWebServiceLotStart = ns1__OIWebServiceLotStart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebServiceLotStart(struct soap*, const struct __ns1__OIWebServiceLotStart *, const char*, const char*);

inline int soap_write___ns1__OIWebServiceLotStart(struct soap *soap, struct __ns1__OIWebServiceLotStart const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OIWebServiceLotStart(soap, p), 0) || soap_put___ns1__OIWebServiceLotStart(soap, p, "-ns1:OIWebServiceLotStart", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OIWebServiceLotStart(struct soap *soap, const char *URL, struct __ns1__OIWebServiceLotStart const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OIWebServiceLotStart(soap, p), 0) || soap_put___ns1__OIWebServiceLotStart(soap, p, "-ns1:OIWebServiceLotStart", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OIWebServiceLotStart(struct soap *soap, const char *URL, struct __ns1__OIWebServiceLotStart const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OIWebServiceLotStart(soap, p), 0) || soap_put___ns1__OIWebServiceLotStart(soap, p, "-ns1:OIWebServiceLotStart", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OIWebServiceLotStart * SOAP_FMAC4 soap_get___ns1__OIWebServiceLotStart(struct soap*, struct __ns1__OIWebServiceLotStart *, const char*, const char*);

inline int soap_read___ns1__OIWebServiceLotStart(struct soap *soap, struct __ns1__OIWebServiceLotStart *p)
{
	if (p)
	{	soap_default___ns1__OIWebServiceLotStart(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OIWebServiceLotStart(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OIWebServiceLotStart(struct soap *soap, const char *URL, struct __ns1__OIWebServiceLotStart *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OIWebServiceLotStart(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OIWebServiceLotStart(struct soap *soap, struct __ns1__OIWebServiceLotStart *p)
{
	if (soap_read___ns1__OIWebServiceLotStart(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OIWebEquipmentStatusCheck_DEFINED
#define SOAP_TYPE___ns1__OIWebEquipmentStatusCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebEquipmentStatusCheck(struct soap*, struct __ns1__OIWebEquipmentStatusCheck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebEquipmentStatusCheck(struct soap*, const struct __ns1__OIWebEquipmentStatusCheck *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebEquipmentStatusCheck(struct soap*, const char*, int, const struct __ns1__OIWebEquipmentStatusCheck *, const char*);
SOAP_FMAC3 struct __ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_in___ns1__OIWebEquipmentStatusCheck(struct soap*, const char*, struct __ns1__OIWebEquipmentStatusCheck *, const char*);
SOAP_FMAC1 struct __ns1__OIWebEquipmentStatusCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebEquipmentStatusCheck(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OIWebEquipmentStatusCheck * soap_new___ns1__OIWebEquipmentStatusCheck(struct soap *soap, int n = -1)
{
	return oisystem_instantiate___ns1__OIWebEquipmentStatusCheck(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OIWebEquipmentStatusCheck * soap_new_req___ns1__OIWebEquipmentStatusCheck(
	struct soap *soap)
{
	struct __ns1__OIWebEquipmentStatusCheck *_p = soap_new___ns1__OIWebEquipmentStatusCheck(soap);
	if (_p)
	{	soap_default___ns1__OIWebEquipmentStatusCheck(soap, _p);
	}
	return _p;
}

inline struct __ns1__OIWebEquipmentStatusCheck * soap_new_set___ns1__OIWebEquipmentStatusCheck(
	struct soap *soap,
	_ns1__OIWebEquipmentStatusCheck *ns1__OIWebEquipmentStatusCheck)
{
	struct __ns1__OIWebEquipmentStatusCheck *_p = soap_new___ns1__OIWebEquipmentStatusCheck(soap);
	if (_p)
	{	soap_default___ns1__OIWebEquipmentStatusCheck(soap, _p);
		_p->ns1__OIWebEquipmentStatusCheck = ns1__OIWebEquipmentStatusCheck;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebEquipmentStatusCheck(struct soap*, const struct __ns1__OIWebEquipmentStatusCheck *, const char*, const char*);

inline int soap_write___ns1__OIWebEquipmentStatusCheck(struct soap *soap, struct __ns1__OIWebEquipmentStatusCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OIWebEquipmentStatusCheck(soap, p), 0) || soap_put___ns1__OIWebEquipmentStatusCheck(soap, p, "-ns1:OIWebEquipmentStatusCheck", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *URL, struct __ns1__OIWebEquipmentStatusCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OIWebEquipmentStatusCheck(soap, p), 0) || soap_put___ns1__OIWebEquipmentStatusCheck(soap, p, "-ns1:OIWebEquipmentStatusCheck", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *URL, struct __ns1__OIWebEquipmentStatusCheck const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OIWebEquipmentStatusCheck(soap, p), 0) || soap_put___ns1__OIWebEquipmentStatusCheck(soap, p, "-ns1:OIWebEquipmentStatusCheck", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OIWebEquipmentStatusCheck * SOAP_FMAC4 soap_get___ns1__OIWebEquipmentStatusCheck(struct soap*, struct __ns1__OIWebEquipmentStatusCheck *, const char*, const char*);

inline int soap_read___ns1__OIWebEquipmentStatusCheck(struct soap *soap, struct __ns1__OIWebEquipmentStatusCheck *p)
{
	if (p)
	{	soap_default___ns1__OIWebEquipmentStatusCheck(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OIWebEquipmentStatusCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OIWebEquipmentStatusCheck(struct soap *soap, const char *URL, struct __ns1__OIWebEquipmentStatusCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OIWebEquipmentStatusCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OIWebEquipmentStatusCheck(struct soap *soap, struct __ns1__OIWebEquipmentStatusCheck *p)
{
	if (soap_read___ns1__OIWebEquipmentStatusCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OIWebServiceLotStartCheck_DEFINED
#define SOAP_TYPE___ns1__OIWebServiceLotStartCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebServiceLotStartCheck(struct soap*, struct __ns1__OIWebServiceLotStartCheck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebServiceLotStartCheck(struct soap*, const struct __ns1__OIWebServiceLotStartCheck *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebServiceLotStartCheck(struct soap*, const char*, int, const struct __ns1__OIWebServiceLotStartCheck *, const char*);
SOAP_FMAC3 struct __ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_in___ns1__OIWebServiceLotStartCheck(struct soap*, const char*, struct __ns1__OIWebServiceLotStartCheck *, const char*);
SOAP_FMAC1 struct __ns1__OIWebServiceLotStartCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceLotStartCheck(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OIWebServiceLotStartCheck * soap_new___ns1__OIWebServiceLotStartCheck(struct soap *soap, int n = -1)
{
	return oisystem_instantiate___ns1__OIWebServiceLotStartCheck(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OIWebServiceLotStartCheck * soap_new_req___ns1__OIWebServiceLotStartCheck(
	struct soap *soap)
{
	struct __ns1__OIWebServiceLotStartCheck *_p = soap_new___ns1__OIWebServiceLotStartCheck(soap);
	if (_p)
	{	soap_default___ns1__OIWebServiceLotStartCheck(soap, _p);
	}
	return _p;
}

inline struct __ns1__OIWebServiceLotStartCheck * soap_new_set___ns1__OIWebServiceLotStartCheck(
	struct soap *soap,
	_ns1__OIWebServiceLotStartCheck *ns1__OIWebServiceLotStartCheck)
{
	struct __ns1__OIWebServiceLotStartCheck *_p = soap_new___ns1__OIWebServiceLotStartCheck(soap);
	if (_p)
	{	soap_default___ns1__OIWebServiceLotStartCheck(soap, _p);
		_p->ns1__OIWebServiceLotStartCheck = ns1__OIWebServiceLotStartCheck;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebServiceLotStartCheck(struct soap*, const struct __ns1__OIWebServiceLotStartCheck *, const char*, const char*);

inline int soap_write___ns1__OIWebServiceLotStartCheck(struct soap *soap, struct __ns1__OIWebServiceLotStartCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OIWebServiceLotStartCheck(soap, p), 0) || soap_put___ns1__OIWebServiceLotStartCheck(soap, p, "-ns1:OIWebServiceLotStartCheck", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *URL, struct __ns1__OIWebServiceLotStartCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OIWebServiceLotStartCheck(soap, p), 0) || soap_put___ns1__OIWebServiceLotStartCheck(soap, p, "-ns1:OIWebServiceLotStartCheck", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *URL, struct __ns1__OIWebServiceLotStartCheck const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OIWebServiceLotStartCheck(soap, p), 0) || soap_put___ns1__OIWebServiceLotStartCheck(soap, p, "-ns1:OIWebServiceLotStartCheck", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OIWebServiceLotStartCheck * SOAP_FMAC4 soap_get___ns1__OIWebServiceLotStartCheck(struct soap*, struct __ns1__OIWebServiceLotStartCheck *, const char*, const char*);

inline int soap_read___ns1__OIWebServiceLotStartCheck(struct soap *soap, struct __ns1__OIWebServiceLotStartCheck *p)
{
	if (p)
	{	soap_default___ns1__OIWebServiceLotStartCheck(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OIWebServiceLotStartCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OIWebServiceLotStartCheck(struct soap *soap, const char *URL, struct __ns1__OIWebServiceLotStartCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OIWebServiceLotStartCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OIWebServiceLotStartCheck(struct soap *soap, struct __ns1__OIWebServiceLotStartCheck *p)
{
	if (soap_read___ns1__OIWebServiceLotStartCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__OIWebServiceCheck_DEFINED
#define SOAP_TYPE___ns1__OIWebServiceCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OIWebServiceCheck(struct soap*, struct __ns1__OIWebServiceCheck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OIWebServiceCheck(struct soap*, const struct __ns1__OIWebServiceCheck *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OIWebServiceCheck(struct soap*, const char*, int, const struct __ns1__OIWebServiceCheck *, const char*);
SOAP_FMAC3 struct __ns1__OIWebServiceCheck * SOAP_FMAC4 soap_in___ns1__OIWebServiceCheck(struct soap*, const char*, struct __ns1__OIWebServiceCheck *, const char*);
SOAP_FMAC1 struct __ns1__OIWebServiceCheck * SOAP_FMAC2 oisystem_instantiate___ns1__OIWebServiceCheck(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OIWebServiceCheck * soap_new___ns1__OIWebServiceCheck(struct soap *soap, int n = -1)
{
	return oisystem_instantiate___ns1__OIWebServiceCheck(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__OIWebServiceCheck * soap_new_req___ns1__OIWebServiceCheck(
	struct soap *soap)
{
	struct __ns1__OIWebServiceCheck *_p = soap_new___ns1__OIWebServiceCheck(soap);
	if (_p)
	{	soap_default___ns1__OIWebServiceCheck(soap, _p);
	}
	return _p;
}

inline struct __ns1__OIWebServiceCheck * soap_new_set___ns1__OIWebServiceCheck(
	struct soap *soap,
	_ns1__OIWebServiceCheck *ns1__OIWebServiceCheck)
{
	struct __ns1__OIWebServiceCheck *_p = soap_new___ns1__OIWebServiceCheck(soap);
	if (_p)
	{	soap_default___ns1__OIWebServiceCheck(soap, _p);
		_p->ns1__OIWebServiceCheck = ns1__OIWebServiceCheck;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OIWebServiceCheck(struct soap*, const struct __ns1__OIWebServiceCheck *, const char*, const char*);

inline int soap_write___ns1__OIWebServiceCheck(struct soap *soap, struct __ns1__OIWebServiceCheck const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__OIWebServiceCheck(soap, p), 0) || soap_put___ns1__OIWebServiceCheck(soap, p, "-ns1:OIWebServiceCheck", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__OIWebServiceCheck(struct soap *soap, const char *URL, struct __ns1__OIWebServiceCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___ns1__OIWebServiceCheck(soap, p), 0) || soap_put___ns1__OIWebServiceCheck(soap, p, "-ns1:OIWebServiceCheck", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___ns1__OIWebServiceCheck(struct soap *soap, const char *URL, struct __ns1__OIWebServiceCheck const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___ns1__OIWebServiceCheck(soap, p), 0) || soap_put___ns1__OIWebServiceCheck(soap, p, "-ns1:OIWebServiceCheck", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__OIWebServiceCheck * SOAP_FMAC4 soap_get___ns1__OIWebServiceCheck(struct soap*, struct __ns1__OIWebServiceCheck *, const char*, const char*);

inline int soap_read___ns1__OIWebServiceCheck(struct soap *soap, struct __ns1__OIWebServiceCheck *p)
{
	if (p)
	{	soap_default___ns1__OIWebServiceCheck(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__OIWebServiceCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__OIWebServiceCheck(struct soap *soap, const char *URL, struct __ns1__OIWebServiceCheck *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__OIWebServiceCheck(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__OIWebServiceCheck(struct soap *soap, struct __ns1__OIWebServiceCheck *p)
{
	if (soap_read___ns1__OIWebServiceCheck(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatus_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebEquipmentStatus(struct soap*, _ns1__OIWebEquipmentStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebEquipmentStatus(struct soap*, const char *, int, _ns1__OIWebEquipmentStatus *const*, const char *);
SOAP_FMAC3 _ns1__OIWebEquipmentStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebEquipmentStatus(struct soap*, const char*, _ns1__OIWebEquipmentStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebEquipmentStatus(struct soap*, _ns1__OIWebEquipmentStatus *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OIWebEquipmentStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebEquipmentStatus(struct soap*, _ns1__OIWebEquipmentStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStart_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStart_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceLotStart(struct soap*, _ns1__OIWebServiceLotStart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceLotStart(struct soap*, const char *, int, _ns1__OIWebServiceLotStart *const*, const char *);
SOAP_FMAC3 _ns1__OIWebServiceLotStart ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceLotStart(struct soap*, const char*, _ns1__OIWebServiceLotStart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceLotStart(struct soap*, _ns1__OIWebServiceLotStart *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OIWebServiceLotStart ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceLotStart(struct soap*, _ns1__OIWebServiceLotStart **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatusCheck_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OIWebEquipmentStatusCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap*, _ns1__OIWebEquipmentStatusCheck *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap*, const char *, int, _ns1__OIWebEquipmentStatusCheck *const*, const char *);
SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap*, const char*, _ns1__OIWebEquipmentStatusCheck **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap*, _ns1__OIWebEquipmentStatusCheck *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OIWebEquipmentStatusCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebEquipmentStatusCheck(struct soap*, _ns1__OIWebEquipmentStatusCheck **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStartCheck_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceLotStartCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap*, _ns1__OIWebServiceLotStartCheck *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap*, const char *, int, _ns1__OIWebServiceLotStartCheck *const*, const char *);
SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap*, const char*, _ns1__OIWebServiceLotStartCheck **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap*, _ns1__OIWebServiceLotStartCheck *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OIWebServiceLotStartCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceLotStartCheck(struct soap*, _ns1__OIWebServiceLotStartCheck **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceCheck_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceCheck(struct soap*, _ns1__OIWebServiceCheck *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceCheck(struct soap*, const char *, int, _ns1__OIWebServiceCheck *const*, const char *);
SOAP_FMAC3 _ns1__OIWebServiceCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceCheck(struct soap*, const char*, _ns1__OIWebServiceCheck **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceCheck(struct soap*, _ns1__OIWebServiceCheck *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OIWebServiceCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceCheck(struct soap*, _ns1__OIWebServiceCheck **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, const char *, int, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*, const char *);
SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, const char*, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult(struct soap*, _ns1__OIWebServiceCheckResponse_OIWebServiceCheckResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 oisystem_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return oisystem_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of oisystemH.h */
